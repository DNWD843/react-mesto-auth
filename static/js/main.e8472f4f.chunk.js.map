{"version":3,"sources":["components/NavBar.js","images/headerLogo.svg","utils/routesMap.js","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","utils/api.js","components/PopupWithForm.js","hooks/useFormWithValidation.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeleteConfirmPopup.js","components/InfoToolTip.js","components/StartPageWithForm.js","components/Login.js","components/Register.js","components/ProtectedRoute.js","utils/token.js","utils/auth.js","components/App.js","utils/endpoints.js","index.js"],"names":["NavBar","email","handleSignoutButtonClick","signOutButtonText","handleMenuClick","isMenuOpened","isDropdownMenu","className","to","onClick","type","title","MAIN","SIGNIN","SIGNUP","Header","props","src","headerLogoPath","alt","path","signupLinkText","signinLinkText","exact","CurrentUserContext","React","createContext","Card","id","link","likesQuantity","owner","likes","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","_id","isLiked","some","likeOwner","name","value","Main","onEditAvatar","style","backgroundImage","avatar","onEditProfile","about","onAddPlace","cards","map","card","Footer","ImagePopup","onOverlayClick","isOpen","onClose","api","URLs","headers","token","this","_baseURL","baseURL","_cardsURL","cardsURL","_userURL","userURL","_likesURL","likesURL","_avatarURL","avatarURL","_headers","_token","fetch","authorization","then","res","ok","json","Promise","reject","status","item","method","body","JSON","stringify","cardId","likeStatus","PopupWithForm","onSubmit","children","disabled","isDisabled","submitButtonText","isLoading","preloaderText","useFormWithValidation","useState","values","setValues","errors","setErrors","isValid","setIsValid","resetForm","useCallback","newValues","newErrors","newIsValid","handleInputChange","event","target","validationMessage","closest","checkValidity","EditProfilePopup","onUpdateUser","description","useEffect","evt","preventDefault","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","AddPlacePopup","DeleteConfirmPopup","isProcessing","isReadyToSubmit","InfoToolTip","titleTextSuccess","titleTextFail","loggedIn","StartPageWithForm","redirectTitleText","redirectLinkText","Login","handleLogin","userData","login","password","onFocus","Register","handleRegister","regEmail","regPassword","ProtectedRoute","Component","component","TOKEN_KEY","BASE_URL","App","closeAllPopups","document","removeEventListener","handleEscClose","setState","isEditProfilePopupOpen","isAddPlacePopupOpen","isEditAvatarPopupOpen","isDeleteConfirmPopupOpen","isImagePopupOpen","selectedCard","undefined","isInfoToolTipOpen","key","handleClickOnOverlay","currentTarget","handleCardLike","state","changeLikeCardStatus","newCard","newCards","cardsItem","length","catch","err","console","log","handleCardClick","addEventListener","handleCardDelete","handleDeleteConfirm","deleteCard","filter","finally","handleEditAvatarClick","activeElement","blur","handleUpdateAvatar","editAvatar","handleEditProfileClick","handleUpdateUser","editProfile","handleAddPlaceClick","handleAddPlaceSubmit","addNewCard","obtainedCard","resultCardsArr","concat","auth","data","history","push","TO_","localStorage","setItem","tokenCheck","getItem","removeItem","handleMenuButtonClick","all","loadUserData","loadCards","currentUserData","initialCardsData","initialCards","initialCard","Provider","withRouter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8472f4f.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\n/**\n * @module NavBar\n * @description Функциональный React-компонент<br>\n * Представляет собой меню со ссылками на профиль пользователя и выход из приложения.\n *  В зависимости от места и контекста использования может иметь разный вид, быть с кнопкой открытия/закрытия\n *  меню и без нее.<br>\n *  * представляет собой выезжающее меню без кнопки открытия/закрытия при использовании на мобильных устройствах,\n *  при этом кнопка открытия/закрытия располагается в хэдере<br>\n *  * представляет собой меню со ссылками без кнопки открытия/закрытия, при использования в хэдере на больших\n *  разрешениях\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {String} props.email - емэйл (логин), введенный пользователем при входе в приложение\n * @param {Function} props.handleSignoutButtonClick - функция-коллбэк, вызывается при клике по \"Выйти\", выход из профиля\n * на страницу входа (авторизации)\n * @param {String} props.signOutButtonText - текст, который будет отображен на кнопке выхода из профиля\n * @param {Function} props.handleMenuClick - функция-коллбэк, вызывается при клике по иконке \"Меню\", открывает или\n *  закрывает меню на мобильных разрешениях\n * @param {Boolean} props.isMenuOpened - индикатор состояния меню:<br>\n *  - true - меню открыто<br>\n *  - false - меню закрыто\n * @param {Boolean} props.isDropdownMenu - пропс, определяющий как будет отрисован компонент:<br>\n *  * true - меню будет отрисовано как выпадающее меню,кнопка управления меню может находиться в другом компоненте\n *  * false - меню будет отрисовано статичным списком ссылок без кнопки открытия/закрытия.<br>\n * <b>Внимание!</b> Этот пропс задается вручную и не является управляемым стейтом.\n * @returns {JSX}\n * @since v.2.1.0\n */\nfunction NavBar({ email, handleSignoutButtonClick, signOutButtonText, handleMenuClick, isMenuOpened, isDropdownMenu }) {\n  return (\n    <>\n      <ul className={`navbar ${isDropdownMenu ? `navbar_type_mobile ${isMenuOpened ? 'navbar_opened' : ''}` : ''}`}>\n        <li className=\"navbar__item\">\n          <Link to=\"#\" className=\"navbar__link\">{email}</Link>\n        </li>\n        <li className=\"navbar__item\">\n          <button onClick={handleSignoutButtonClick} className=\"button button_type_signout navbar__button-signout\">{signOutButtonText}</button>\n        </li>\n      </ul>\n      {!isDropdownMenu\n        && <button\n          type=\"button\"\n          title=\"Меню\"\n          onClick={handleMenuClick}\n          className={`button navbar__menu-button ${isMenuOpened ? \"navbar__menu-button_type_open\" : \"navbar__menu-button_type_close\"}`}\n        >\n        </button>\n      }\n    </>\n  )\n}\n\nexport default NavBar;\n","export default __webpack_public_path__ + \"static/media/headerLogo.a307e1c4.svg\";","/**\n * Роуты\n * @ignore\n */\nexport const MAIN = '/';\n\nexport const SIGNIN = '/sign-in';\n\nexport const SIGNUP = '/sign-up';\n","import React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport headerLogoPath from '../images/headerLogo.svg';\nimport {SIGNIN, SIGNUP, MAIN} from '../utils/routesMap';\n\n/**\n * @module Header\n * @description Функциональный React-компонент Header<br>\n * Возвращает JSX-фрагмент разметки - \"шапку\" страницы приложения\n * @returns {JSX} - JSX-фрагмент разметки, блок Header\n * @since v.2.0.0\n */\nfunction Header(props) {\n  return (\n    <header className=\"header page__header\">\n      <img className=\"header__logo\" src={ headerLogoPath } alt=\"логотип проекта 'Место-Россия'\" />\n      <Switch>\n        <Route path={SIGNIN}>\n          <Link to={SIGNUP} className=\"header__link\">{props.signupLinkText}</Link>\n        </Route>\n        <Route path={SIGNUP}>\n          <Link to={SIGNIN} className=\"header__link\">{props.signinLinkText}</Link>\n        </Route>\n        <Route path={MAIN} exact>\n          <NavBar {...props} />\n        </Route>\n      </Switch>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\r\n\r\n/**\r\n * @constant CurrentUserContext \r\n * @type {Object}\r\n * @description - глобальный стейт, контекст текущего пользователя - объект с данными о текущем пользователе\r\n */\r\nexport const CurrentUserContext = React.createContext({});","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\n/**\r\n * @module Card\r\n * @description Функциональный React-компонент<br>\r\n * Декларирует отрисовку карточки<br>\r\n * Принимает объект параметров - props<br>\r\n * Возвращает JSX-фрагмент разметки - карточку, заполненный данными карточки<br>\r\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\r\n * @param {String} props.id - уникальный идентификатор карточки, присваивается карточке сервером.<br>\r\n * <b>ПРИМЕЧАНИЕ: props.id используется при отрисовке компонента Card для присвоения обязательному параметру key</b>\r\n * @param {String} props.link - ссылка на изображение\r\n * @param {String} props.title - название изображения\r\n * @param {Number} props.likesQuantity - количество лайков\r\n * @param {Object} props.owner - объект, данные о владельце карточки\r\n * @param {Array} props.likes - массив, содержит id всех пользователей, лайкнувших карточку\r\n * @param {Function} props.onCardClick - функция-колбэк, вызывается при клике по изображению карточки, \r\n * открывает попап с полноразмерным изображением карточки<br>\r\n * Принимает аргументом объект с названием карточки и ссылкой на изображение для дальнейшей передачи \r\n * этих параметров в ImagePopup\r\n * @param {Function} props.onCardLike -  функция-колбэк, вызывается при клике по \"лайку\" карточки,\r\n * ставит/снимает \"лайки\", принимает аргументом объект с id карточки и массивом лайков карточки\r\n * @param {Function} props.onCardDelete - функция-колбэк, вызывается при клике по иконке удаления карточки,\r\n * открывает попап подтверждения удаления, принимает аргументом объект с id карточки\r\n * @returns {JSX} - JSX-фрагмент разметки, элемент card\r\n * @since v.2.0.0\r\n */\r\nfunction Card({ id, link, title, likesQuantity, owner, likes, onCardClick, onCardLike, onCardDelete }) {\r\n\r\n  /**\r\n   * @constant currentUser\r\n   * @type {Object}\r\n   * @description Контекст текущего пользователя<br>\r\n   * Используется для того, чтобы определить является ли текущий пользователь автором карточки\r\n   *  и нажимал ли он на карточке \"лайк\".\r\n   * @param {Object} currentUser - объект с актуальными данными текущего пользователя\r\n   * @property {String} currentUser._id - id текущего пользователя\r\n   * @since v.2.0.2\r\n   */\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n\r\n  /**\r\n   * @constant isOwn\r\n   * @type {Boolean}\r\n   * @description Идентификатор, устанавливающий является ли текущий пользователь владельцем карточки\r\n   * @since v.2.0.2\r\n   */\r\n  const isOwn = owner._id === currentUser._id;\r\n\r\n  /**\r\n   * @constant isLiked\r\n   * @type {Boolean}\r\n   * @description Идентификатор, устанавливающий лайкал ли текущий пользователь карточку\r\n   * @since v.2.0.2\r\n   */\r\n  const isLiked = likes.some(likeOwner => likeOwner._id === currentUser._id);\r\n\r\n  /**\r\n   * @method handleImageClick\r\n   * @description Обработчик клика по изображению карточки, вызывает коллбэк props.onCardClick и передает ему данные карточки\r\n   * @argument {Object} object - объект с данными карточки, аргумент коллбэка props.onCardClick \r\n   * @param {String} object.link - ссылка на изображение кликнутой карточки\r\n   * @param {String} object.title - название кликнутой карточки\r\n   * @public\r\n   * @since v.2.0.0\r\n   */\r\n  const handleImageClick = () => {\r\n    onCardClick({ link, title });\r\n  };\r\n\r\n  /**\r\n   * @method handleLikeClick\r\n   * @description Обработчик клика по \"лайку\" карточки, вызывает коллбэк props.onCardLike и передает ему данные карточки\r\n   * @argument {Object} object - объект с данными карточки, аргумент коллбэка props.onCardLike\r\n   * @param {String} object.id - id лайкнутой карточки\r\n   * @param {String} object.likes - массив \"лайков\" лайкнутой карточки\r\n   * @public\r\n   * @since v.2.0.2\r\n   */\r\n  const handleLikeClick = () => { onCardLike({ id, likes }) };\r\n\r\n  /**\r\n   * @method handleDeleteClick\r\n   * @description Обработчик клика по иконке \"удалить\", вызывает коллбэк props.onCardDelete и передает ему id карточки\r\n   * @argument {Object} object - объект с данными удаляемой карточки, аргумент коллбэка props.onCardDelete\r\n   * @param {String} object.id - id удаляемой карточки\r\n   * @public\r\n   * @since v.2.0.2\r\n   */\r\n  const handleDeleteClick = () => { onCardDelete({ id }) };\r\n\r\n  return (\r\n    <li className=\"card\">\r\n      <img className=\"card__image\" onClick={ handleImageClick } src={ link } alt={ title } name=\"photo\" title=\"Открыть фото\" />\r\n      <button type=\"button\" onClick={ handleDeleteClick } className={ `button button_type_delete card__delete-button ${isOwn ? 'card__delete-button_enabled' : ''}` } name=\"delete-button\" value=\"delete\" title=\"Удалить фото\"></button>\r\n      <div className=\"card__description\">\r\n        <h2 className=\"card__title\">{ title }</h2>\r\n        <div className=\"card__like-info\">\r\n          <button type=\"button\" onClick={ handleLikeClick } className={ `button button_type_like card__like-button  ${isLiked ? 'button_like-status_checked' : 'button_like-status_not-checked'}` } name=\"like-button\" value=\"like\"></button>\r\n          <span className=\"card__like-counter\">{ likesQuantity }</span>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport Card from './Card';\r\n\r\n/**\r\n * @module Main\r\n * @description Функциональный React-компонент<br>\r\n * Декларирует отрисовку основного контента приложения: профиль пользователя, карточки с изображениями<br>\r\n * В компонент Main импортируются:<br>\r\n *  - api - экземпляр класса Api <br>\r\n *  - Card - компонент Card<br>\r\n * Принимает объект параметров - props<br>\r\n * Возвращает JSX-фрагмент разметки основного контента приложения\r\n * @param {Object} props - объект с переданными функциями-коллбэками\r\n * @param {Function} props.onAddPlace - функция-коллбэк, вызывается при клике по кнопке \"Добавить фото\", открывает попап добавления карточки\r\n * @param {Function} props.onCardClick - функция-коллбэк, вызывается при клике по изображению карточки, открывает попап с полноразмерным изображением карточки<br>\r\n * <b>ПРИМЕЧАНИЕ</b> В компоненте Main не используется. Через пропсы компонента Main пробрасывается в компонент Card.\r\n * @param {Function} props.onEditAvatar - функция-коллбэк, вызывается при клике по аватару пользователя, открывает попап редактирования аватара пользователя\r\n * @param {Function} props.onEditProfile - функция-коллбэк, вызывается при клике по кнопке \"Редактировать профиль\", открывает попап редактирования профиля\r\n * @param {Function} props.onCardDelete - функция-коллбэк, вызывается при клике по иконке удаления карточки, открывает попап подтверждения удаления карточки\r\n * @param {Function} props.onCardLike - функция-коллбэк, вызывается при клике по \"лайку\" карточки, ставит или удаляет \"лайк\", в зависимости от его состояния\r\n * @param {Array} props.cards - массив объектов(карточек)\r\n * @returns {JSX} - JSX-фрагмент разметки, блок main\r\n * @see {@link Api}\r\n * @see {@link Card}\r\n * @since v.2.0.0\r\n */\r\nfunction Main(props) {\r\n \r\n  /**\r\n   * @constant currentUser\r\n   * @type {Object}\r\n   * @description Контекст текущего пользователя<br>\r\n   * Используется для того, чтобы определить актуальные данные профиля пользователя.\r\n   * @param {Object} currentUser - объект с актуальными данными текущего пользователя\r\n   * @property {String} currentUser.name - имя пользователя\r\n   * @property {String} currentUser.about - описание о пользователе\r\n   * @property {String} currentUser.avatar - ссылка на аватар пользователя\r\n   * @since v.2.0.2\r\n   */\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n    \r\n  return (\r\n    <main className=\"content page__content\">\r\n      <section className=\"user-profile content__user-profile\" key=\"user-profile\">\r\n        <button type=\"button\" onClick={ props.onEditAvatar } className=\"button  user-profile__avatar-button\" style={ { backgroundImage: `url(${currentUser.avatar})` } } name=\"edit-avatar-form-button\" id=\"edit-avatar-form-button\" value=\"Добавить аватар\" title=\"Изменить аватар\"></button>\r\n        <div className=\"user-profile__user-info\">\r\n          <h1 className=\"user-profile__user-name\">{ currentUser.name }</h1>\r\n          <button type=\"button\" onClick={ props.onEditProfile } className=\"button button_type_edit user-profile__edit-button\" name=\"edit-profile-form-button\" id=\"edit-profile-form-button\" value=\"Открыть форму\" title=\"Редактировать профиль\"></button>\r\n          <p className=\"user-profile__user-job\">{ currentUser.about }</p>\r\n        </div>\r\n        <button type=\"button\" onClick={ props.onAddPlace } className=\"button button_type_add user-profile__add-button\" name=\"add-photo-form-button\" id=\"add-photo-form-button\" value=\"Добавить фото\" title=\"Добавить фото\"></button>\r\n      </section>\r\n\r\n      <section className=\"photo content__photo\" key=\"photo-cards\">\r\n        <ul className=\"photo__cards\">\r\n          { props.cards.map(card =>\r\n            <Card\r\n              key={ card.id }\r\n              { ...card }\r\n              onCardClick={ props.onCardClick }\r\n              onCardLike={ props.onCardLike }\r\n              onCardDelete={ props.onCardDelete }\r\n            />)\r\n          }\r\n        </ul>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport {MAIN} from '../utils/routesMap';\n\n/**\n * @module Footer\n * @description Функциональный React-компонент Footer<br>\n * Возвращает JSX-фрагмент разметки - \"подвал\" страницы приложения\n * @returns {JSX} - JSX-фрагмент разметки, блок Footer\n * @since v.2.0.0\n */\nfunction Footer() {\n  return (\n    <Route path={MAIN} exact>\n      <footer className=\"footer\">\n        <p className=\"footer__copyright\">&#169; 2020 Mesto Russia</p>\n      </footer>\n    </Route>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\n/**\n * @module ImagePopup\n * @description Функциональный React-компонент<br>\n * Открывает изображение карточки в полном размере<br>\n * Принимает объект параметров - props<br>\n * Возвращает JSX-фрагмент разметки - попап с полноразмерным изображением карточки<br>\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\n * @param {Object} props.card - объект с данными карточки\n * @param {String} props.card.link - ссылка на изображение карточки\n * @param {String} props.card.title - название карточки\n * @param {Function} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @returns {JSX} - JSX-фрагмент разметки, попап с полноразмерным изображением карточки\n * @since v.2.0.0\n */\nfunction ImagePopup(props) {\n  return (\n    <div onClick={ props.onOverlayClick } className={ `popup page__overlay page__overlay_theme_dark popup_type_view-photo ${props.isOpen ? 'popup_opened' : ''}` } id=\"view\">\n      <div className=\"popup__container\">\n        <button type=\"button\" onClick={ props.onClose } className=\"button button_type_close popup__close-button popup__close-button_type_photo\" name=\"close-photo\" value=\"Закрыть фото\"></button>\n        <figure className=\"popup__photo-content\">\n          <img className=\"popup__place-image\" src={ `${props.card ? props.card.link : '#'}  ` } alt={ `${props.card ? props.card.title : 'изображение'}` } />\n          <figcaption className=\"popup__place-name\">{ `${props.card ? props.card.title : 'изображение'}` }</figcaption>\n        </figure>\n      </div>\n    </div>\n  );\n}\n\nexport default ImagePopup;\n","/**\r\n * @description  Класс Api <br>\r\n * Отвечает за отправку запросов на сервер и проверку полученных ответов\r\n * @param {Object} Object - принимает в конструктор объект { URLs, headers, token } \r\n * @param {Object} Object.URLs  - объект, содержащий адреса для отправки запросов\r\n * @param {String} Object.URLs.baseURL - базовый URL сервера\r\n * @param {String} Object.URLs.cardsURL - URL для получения/добавления карточек\r\n * @param {String} Object.URLs.userURL - URLдля получения/добавления данных пользователя\r\n * @param {String} Object.URLs.likesURL - URL для получения/добавления информации о \"лайках\"\r\n * @param {String} Object.URLs.avatarURL - URL для получения/добавления ссылки на аватар\r\n * @param {Object} Object.headers - объект, содержащий заголовки запросов\r\n * @param {String} Object.headers.authorization - код авторизации (токен)\r\n * @param {String} Object.token  - токен для доступа на сервер\r\n * @since v.1.0.0\r\n * @example\r\n * const api = new Api({\r\n * URLs: {\r\n *   baseURL: 'https://mesto...',\r\n *   cardsURL: 'https://mesto.../cards/',\r\n *   userURL: 'https://mesto.../users/me',\r\n *   likesURL: 'https://mesto.../cards/likes/',\r\n *   avatarURL: 'https://mesto.../users/me/avatar'\r\n * },\r\n * headers: {\r\n *   \"authorization\": '<Ваш код авторизации>'\r\n * },\r\n * token: '<Ваш токен>'\r\n * });\r\n */\r\nclass Api {\r\n  constructor({ URLs, headers, token }) {\r\n    this._baseURL = URLs.baseURL;\r\n    this._cardsURL = URLs.cardsURL;\r\n    this._userURL = URLs.userURL;\r\n    this._likesURL = URLs.likesURL;\r\n    this._avatarURL = URLs.avatarURL;\r\n    this._headers = headers;\r\n    this._token = token;\r\n  }\r\n\r\n  /**\r\n   * @description  Публичный метод<br>\r\n   * Загружает с сервера данные пользователя\r\n   * @public\r\n   * @returns {Promise} - возвращает промис с данными пользователя\r\n   * @since v.1.0.0\r\n   */\r\n  loadUserData() {\r\n    return fetch(this._userURL, {\r\n      headers: {\r\n        authorization: this._token\r\n      },\r\n    })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description  Публичный метод<br>\r\n   * Загружает элементы с сервера\r\n   * @public\r\n   * @returns {Promise} - возвращает промис с данными элементов, сохраненных на сервере\r\n   * @since v.1.0.0\r\n   */\r\n  loadCards() {\r\n    return fetch(this._cardsURL, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Сохраняет на сервер элемент, добавленный через Форму добавления нового элемента<br>\r\n   * Принимает аргументом объект item\r\n   * @public\r\n   * @param {Object} item  - объект с параметрами элемента\r\n   * @param {String} item.name - название элемента из инпута Формы добавления нового элемента\r\n   * @param {String} item.link - ссылка на изображение элемента из инпута Формы добавления нового элемента\r\n   * @returns {Promise} - возвращает промис, содержащий данные нового элемента, полученные от сервера\r\n   * @since v.1.0.0\r\n   * @example\r\n   * api.addNewCard({name: <название элемента>, link: <ссылка на изображение элемента>})\r\n   */\r\n  addNewCard(item) {\r\n    return fetch(this._cardsURL, {\r\n      method: 'POST',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name: item.name,\r\n        link: item.link,\r\n      })\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject((`Ошибка: ${res.status}`));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Удаляет элемент с сервера<br>\r\n   * Принимает аргументом id удаляемого элемента\r\n   * @public\r\n   * @param {String} cardId  - id удаляемого элемента\r\n   * @returns {Promise} - возвращает промис с сообщением об успешном удалении элемента\r\n   * @since v.1.0.0\r\n   */\r\n  deleteCard(cardId) {\r\n    return fetch(`${this._cardsURL}${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token,\r\n      }\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Редактирует данные в профиле пользователя на сервере<br>\r\n   * Принимает арументом объект с новыми данными пользователя, веденными через Форму редактирования профиля\r\n   * @public\r\n   * @param {Object} Object  - { name, about } - объект с новыми данными пользователя\r\n   * @param {String} Object.name - новое имя пользователя, введенное в Форму редактирования профиля\r\n   * @param {String} Object.about - новое описание пользователя, введенное в Форму редактирования профиля\r\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n   * @since v.1.0.0\r\n   * @example\r\n   * api.editProfile({ \r\n   *   name: <новое имя пользователя, введенное в инпут Формы редактирования профиля>, \r\n   *   job: <новое описание пользователя, введенное в инпут Формы редактирования профиля >\r\n   * });\r\n   */\r\n  editProfile({ name, about }) {\r\n    return fetch(`${this._userURL}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name,\r\n        about\r\n      })\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Изменяет статус кнопки \"лайк\" у карточки<br>\r\n   * Принимает аргументом id карточки, у которой произошло нажатие \"лайка\" и новое состояние \"лайка\"\r\n   * @public\r\n   * @param {String} id - id элемента, на котором произошло нажатие \"лайка\"\r\n   * @param {Boolean} likeStatus - новое состояние \"лайка\": если true - \"лайк\" поставлен, если false - \"лайк\" снят\r\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n   * @public\r\n   * @since v2.0.2\r\n   */\r\n  changeLikeCardStatus(id, likeStatus) {\r\n    return fetch(`${this._likesURL}${id}`, {\r\n      method: `${likeStatus ? 'PUT' : 'DELETE'}`,\r\n      headers: {\r\n        authorization: this._token,\r\n      }\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n  \r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Сохраняет на сервер новую ссылку на аватар пользователя<br>\r\n   * Принимает аргументом ссылку на новый аватар пользователя, полученную из Формы редактирования аватара\r\n   * @public\r\n   * @param {String} avatar - новая ссылка на аватар пользователя, полученная из Формы редактирования аватара\r\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n   * @since v.1.0.0\r\n   */\r\n  editAvatar(avatar) {\r\n    return fetch(`${this._avatarURL}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: avatar,\r\n      })\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n}\r\n\r\n/**\r\n * @constant api\r\n * @description Экземпляр класса Api<br>\r\n * Экспортируется в компонент App\r\n * @memberof Api\r\n * @instance\r\n * @since v.2.0.0\r\n */\r\nconst api = new Api({\r\n  URLs: {\r\n    baseURL: 'https://mesto.nomoreparties.co/v1/cohort-14/',\r\n    cardsURL: 'https://mesto.nomoreparties.co/v1/cohort-14/cards/',\r\n    userURL: 'https://mesto.nomoreparties.co/v1/cohort-14/users/me/',\r\n    likesURL: 'https://mesto.nomoreparties.co/v1/cohort-14/cards/likes/',\r\n    avatarURL: 'https://mesto.nomoreparties.co/v1/cohort-14/users/me/avatar/'\r\n  },\r\n  headers: {\r\n    \"authorization\": '85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546'\r\n  },\r\n  token: '85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546'\r\n});\r\n\r\nexport default api;","/**\n * @module PopupWithForm\n * @description Функциональный React-компонент<br>\n * Шаблонный компонент попапа<br>\n * По принятым параметрам props и JSX-фрагменту разметки с инпутами props.children создает попап с формой для каждой\n * конкретной задачи: редактирование профиля, редактирование аватара, добавление карточки, подтверждение удаления карточки<br>\n * Принимает объект параметров - props<br>\n * Возвращает JSX-фрагмент разметки - попап<br>\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\n * @param {JSX} props.children - JSX-фрагмент, список инпутов попапа<br>\n * <b>ПРИМЕЧАНИЕ:</b> Может не указываться явно в пропсах, может быть указан JSX-фрагментом при декларировании отрисовки компонента\n * @param {String} props.name - название формы, вставляется в атрибут name тега form и в css-класс, уточняющий тип формы\n * @param {String} props.title - название попапа\n * @param {String} props.submitButtonText - текст, который будет отображаться на кнопке submit\n * @param {String} props.preloaderText - текст, отображаемый на кнопке сабмит во время загрузки, т.е. когда isLoading: true\n * @param {Funcion} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею попапа, закрывает попап\n * @param {Function} props.onSubmit - функция-коллбэк, вызывается при сабмите формы попапа\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true: попап отображается<br>\n *  - false: попап не отображается\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новых данных на сервер:<br>\n *  - true - идет загрузка<br> -  false - нет загрузки\n * @param {Boolean} props.isReadyToSubmit - индикатор готовности формы к сабмиту, вычисляется по результатам валидации инпутов:<br>\n * true - форма готова к сабмиту, все поля валидны<br>\n * false - форма не готова к сабмиту, хотя бы одно из полей не валидно<br>\n * <b>ПРИМЕЧАНИЕ: </b>в попапе подтверждения удаления DeleteConfirmPopup нет формы, поэтому этот параметр принимается от DeleteConfirmPopup\n * в значении true по умолчанию <br>Since: v.2.0.5\n * @returns {JSX} - JSX-фрагмент разметки, попап\n * @since v.2.0.0\n */\nfunction PopupWithForm(props) {\n  return (\n    <div onClick={ props.onOverlayClick } className={ `popup page__overlay page__overlay_theme_light popup_type_${props.name} ${props.isOpen ? 'popup_opened' : ''}` } id={ props.name }>\n      <div className=\"popup__container\">\n        <button type=\"button\" onClick={ props.onClose } className=\"button button_type_close popup__close-button popup__close-button_type_modal\" name=\"close-popup\" value=\"Закрыть\"></button>\n        <form onSubmit={ props.onSubmit } className={ `form popup__form form_type_${props.name}` } name={ `${props.name}-form` } id={ `${props.name}-form` } >\n          <h2 className=\"form__title\">{ props.title }</h2>\n          { props.children }\n          <button type=\"submit\" disabled={ props.isDisabled } className={ `button ${props.isDisabled ? 'button_type_submit-inactive' : 'button_type_submit'} form__submit-button` } name={ `${props.name}-button` } value={ props.submitButtonText }>{ props.isLoading ? props.preloaderText : props.submitButtonText }</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default PopupWithForm;\n","import { useCallback, useState } from 'react';\n\n/**\n * @module useFormWithValidation\n * @description Пользовательский хук.<br>\n * Запускает валидацию формы, с которой используется. Для запуска валидации, хук\n *  импортируется в компонент с формой и запускается. Хук выполняет валидацию и вывод ошибок\n *  используя браузерную валидацию, т.е. свойство validity объекта ValidityState. Возвращает объект\n *  со стейтами и методами.\n * @returns {Object}  { values, errors, isValid, handleInputChange, setValues, resetForm }\n * @since v.2.0.6\n * @public\n */\nexport function useFormWithValidation() {\n\n  /**\n   * @constant {Object}\n   * @name values\n   * @description Стейт-переменная, сохраняет значения полей инпутов формы в виде объекта,\n   *  в котором у пар \"ключ: значение\" ключами являются имена инпутов (name),\n   *  а значениями - значения полей инпутов (value).\n   * @since v.2.0.6\n   */\n  const [values, setValues] = useState({});\n\n  /**\n   * @constant {Object}\n   * @name errors\n   * @description Стейт-переменная, сохраняет ошибки валидации инпутов формы в виде объекта,\n   *  в котором у пар \"ключ: значение\" ключами являются имена инпутов (name),\n   *  а значениями - браузерные сообщения об ошибке.\n   * @since v.2.0.6\n   */\n  const [errors, setErrors] = useState({});\n\n  /**\n   * @constant {Boolean}\n   * @name isValid\n   * @description Стейт-переменная, устанавливающая является ли форма валидной по состоянию\n   *  свойства validity объекта ValidityState.<br> true - форма валидна, false - форма не валидна.\n   * @since v.2.0.6\n   */\n  const [isValid, setIsValid] = useState(false);\n\n  /**\n   * @method\n   * @name handleInputChange\n   * @argument {Event} event - событие\n   * @description Обработчик изменения полей инпутов.<br> При каждом вводе в поле инпута введенное значение\n   *  и результаты валидации введенных значений и формы в целом сохраняются в соответствующие стейты.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setValues({...values, [name]: value });\n    setErrors({ ...errors, [name]: event.target.validationMessage });\n    setIsValid(event.target.closest(\"form\").checkValidity());\n  };\n\n  /**\n   * @method\n   * @name resetForm\n   * @description Сброс формы после ввода значений<br> Если после ввода значений в форму новые значения не были\n   * отправлены, форма приводится в изначальное актуальное состояние установкой стейтов в необходимые состояния.\n   *  Состояния стейтов передаются аргументами коллбэку метода resetForm.\n   * @public\n   * @since v.2.0.6\n   */\n  const resetForm = useCallback(\n    /**\n     * @function resetForm_callback\n     * @param {Object} newValues - новое значение стейта values\n     * @param {Object} newErrors - новое значение стейта errors\n     * @param {Boolean} newIsValid - новое значение стейта isValid\n     * @description Коллбэк метода resetForm.<br> Устанавливает стейты в состояния согласно принятым аргументам.\n     * @since v.2.0.6\n     */\n    (newValues = {}, newErrors = {}, newIsValid = false) => {\n      setValues((newValues));\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return { values, errors, isValid, handleInputChange, setValues, resetForm };\n};\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport { useFormWithValidation } from '../hooks/useFormWithValidation';\r\n\r\n/**\r\n * @module EditProfilePopup\r\n * @description Функциональный React-компонент<br>\r\n * Редактирует данные профиля пользователя<br>\r\n * Для успешного изменения профиля пользователь должен ввести валидные данные в поля \"Имя\" и \"О себе\"<br>\r\n * Принимает объект параметров props<br>\r\n * Возвращает JSX-фрагмент разметки попапа редактирования профиля пользователя<br>\r\n * @param {Object} props - объект с параметрами\r\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Function} props.onUpdateUser -  функция-коллбэк, обновляет данные профиля пользователя \r\n * при успешном сабмите формы редактирования профиля\r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт\r\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новых данных профиля пользователя, \r\n * управляет отображением прелоадера загрузки:<br>\r\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\r\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст\r\n * @returns {JSX} - JSX-фрагмент разметки, попап редактирования профиля пользователя\r\n * @see {@link PopupWithForm}\r\n * @since v.2.0.2\r\n */\r\nfunction EditProfilePopup({ isOpen, isLoading, onClose, onOverlayClick, onUpdateUser }) {\r\n\r\n  /**\r\n   * Запускаем хук валидации формы\r\n   * @ignore\r\n   * @since v.2.0.6\r\n   */\r\n  const { values, errors, isValid, handleInputChange, resetForm } = useFormWithValidation();\r\n\r\n  /**\r\n   * @constant currentUser\r\n   * @type {Boolean}\r\n   * @description Контекст текущего пользователя<br>\r\n   * Используется для того, чтобы определить актуальные данные профиля пользователя.\r\n   * @param {Object} currentUser - объект с актуальными данными текущего пользователя\r\n   * @property {String} currentUser.name - имя пользователя\r\n   * @property {String} currentUser.about - описание о пользователе\r\n   * @since v.2.0.2\r\n   */\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n\r\n  const { name, description } = values;\r\n\r\n /**\r\n  * @method handleSubmit\r\n  * @argument {Event} evt - событие\r\n  * @description Обработчик сабмита формы добавления новой карточки<br>\r\n  * Вызывает метод onUpdateUser, полученный из props.\r\n  * @public\r\n  * @since v.2.0.6\r\n  */\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    onUpdateUser({\r\n      name, about: description\r\n    });\r\n  }\r\n\r\n  /**\r\n   * При открытии попапа устанавливаем актуальные данные профиля пользователя в инпутах формы\r\n   * @ignore\r\n   */\r\n  React.useEffect(() => {\r\n    resetForm({\r\n      name: currentUser.name,\r\n      description: currentUser.about\r\n    }, {}, true);\r\n    // eslint-disable-next-line\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <PopupWithForm\r\n      name=\"edit-profile\"\r\n      title=\"Редактировать профиль\"\r\n      submitButtonText=\"Сохранить\"\r\n      isOpen={ isOpen }\r\n      onClose={ onClose }\r\n      onOverlayClick={ onOverlayClick }\r\n      onSubmit={ handleSubmit }\r\n      isLoading={ isLoading }\r\n      preloaderText=\"Сохранение...\"\r\n      isDisabled={ !isValid }\r\n    >\r\n      <>\r\n        <ul className=\"form__inputs\">\r\n          <li className=\"form__field\">\r\n            <input\r\n              id=\"user-name-input\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              onChange={ handleInputChange }\r\n              value={ name || '' }\r\n              className=\"form__input form__input_type_name\"\r\n              placeholder=\"Имя\"\r\n              required\r\n              minLength=\"1\"\r\n              maxLength=\"30\"\r\n            />\r\n            <span className=\"form__input-error\" id=\"edit-profile-input-error\">{ errors.name || '' }</span>\r\n          </li>\r\n          <li className=\"form__field\">\r\n            <input\r\n              id=\"user-job-input\"\r\n              name=\"description\"\r\n              type=\"text\"\r\n              onChange={ handleInputChange }\r\n              value={ description || '' }\r\n              className=\"form__input form__input_type_job\"\r\n              placeholder=\"О себе\"\r\n              required\r\n              minLength=\"3\"\r\n              maxLength=\"35\"\r\n            />\r\n            <span className=\"form__input-error\" id=\"edit-profile-input-error\">{ errors.description || '' }</span>\r\n          </li>\r\n        </ul>\r\n      </>\r\n    </PopupWithForm>\r\n  );\r\n}\r\n\r\nexport default EditProfilePopup;\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { useFormWithValidation } from '../hooks/useFormWithValidation';\r\n\r\n/**\r\n * @module EditAvatarPopup\r\n * @description Функциональный React-компонент<br>\r\n * Изменяет аватар пользователя.<br>\r\n * Для успешного изменения аватара пользователь должен ввести корректную ссылку (url-адрес) на новый аватар <br>\r\n * Принимает объект параметров props<br>\r\n * Возвращает JSX-фрагмент разметки попапа редактирования аватара пользователя<br>\r\n * @param {Object} props - объект с параметрами\r\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Function} props.onUpdateAvatar -  функция-коллбэк, обновляет аватар пользователя при успешном сабмите формы изменения аватара\r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт\r\n * @param {Boolean} props.isLoading - индикатор состояния загрузки нового аватара пользователя, \r\n * управляет отображением прелоадера загрузки:<br>\r\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\r\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст:\r\n * @returns {JSX} - JSX-фрагмент разметки, попап редактирования аватара пользователя\r\n * @see {@link PopupWithForm}\r\n * @since v.2.0.2\r\n */\r\nconst EditAvatarPopup = ({ isOpen, isLoading, onClose, onOverlayClick, onUpdateAvatar }) => {\r\n\r\n  /**\r\n  * @constant useFormWithValidation\r\n  * @description Запуск хука валидации формы\r\n  * @see {@link useFormWithValidation}\r\n  * @since v.2.0.6\r\n  */\r\n  const { values, errors, isValid, handleInputChange, resetForm } = useFormWithValidation();\r\n\r\n  const { avatar } = values;\r\n  \r\n  /**\r\n  * @method handleSubmit\r\n  * @argument {Event} evt - событие\r\n  * @description Обработчик сабмита формы добавления новой карточки<br>\r\n  * Вызывает метод onUpdateAvatar, полученный из props.\r\n  * @public\r\n  * @since v.2.0.6\r\n  */\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    onUpdateAvatar({ avatar });\r\n  };\r\n\r\n  /**\r\n   * При закрытии попапа очищаем инпут формы и сбрасываем валидацию\r\n   * @ignore\r\n   */\r\n  React.useEffect(() => {\r\n    resetForm({}, {}, false);\r\n    // eslint-disable-next-line\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <PopupWithForm\r\n      name=\"edit-avatar\"\r\n      title=\"Обновить аватар\"\r\n      submitButtonText=\"Создать\"\r\n      isOpen={ isOpen }\r\n      onClose={ onClose }\r\n      onOverlayClick={ onOverlayClick }\r\n      onSubmit={ handleSubmit }\r\n      isLoading={ isLoading }\r\n      preloaderText=\"Сохранение...\"\r\n      isDisabled={ !isValid }\r\n      children={\r\n        <ul className=\"form__inputs\">\r\n          <li className=\"form__field\">\r\n            <input\r\n              id=\"avatar-link-input\"\r\n              name=\"avatar\"\r\n              type=\"url\"\r\n              onChange={ handleInputChange }\r\n              value={ avatar || '' }\r\n              className=\"form__input form__input_type_avatar-link\"\r\n              placeholder=\"Ссылка на картинку\"\r\n              required\r\n            />\r\n            <span className=\"form__input-error\" id=\"avatar-link-input-error\">{ errors.avatar }</span>\r\n          </li>\r\n        </ul>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default EditAvatarPopup;\r\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport { useFormWithValidation } from '../hooks/useFormWithValidation';\n\n/**\n * @module AddPlacePopup\n * @description Функциональный React-компонент<br>\n * Добавляет карточку в приложение<br>\n * Для успешного добавления карточки пользователь должен ввести корректные данные:\n *  название карточки (изображения) и ссылку (url-адрес) на изображение<br>\n * Принимает объект параметров props<br>\n * Возвращает JSX-фрагмент разметки попапа добавления карточки<br>\n * @param {Object} props - объект параметров\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею,\n *  закрывает попап\n * @param {Function} props.onSubmit - функция-коллбэк, добавляет карточки в приложение при\n *  успешном сабмите формы добавления карточки\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новой карточки,\n *  управляет отображением прелоадера загрузки:<br>\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст\n * @public\n * @see {@link PopupWithForm}\n * @since v.2.0.2\n */\nconst AddPlacePopup = ({\n  isOpen, isLoading, onClose, onOverlayClick, onSubmit,\n}) => {\n  /**\n   * @constant useFormWithValidation\n   * @description Запуск хука валидации формы\n   * @see {@link useFormWithValidation}\n   * @since v.2.0.6\n   */\n  const { values, errors, isValid, handleInputChange, resetForm } = useFormWithValidation();\n\n  const { title, link } = values;\n\n  /**\n   * @method handleSubmit\n   * @argument {Event} evt - событие\n   * @description Обработчик сабмита формы добавления новой карточки<br>\n   * Вызывает метод onSubmit, полученный из props.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    onSubmit({ name: title, link });\n  };\n\n  /**\n   * После закрытия попапа сбрасываем значения полей формы и валидацию\n   * @ignore\n   */\n  React.useEffect(() => {\n    resetForm({}, {}, false);\n    // eslint-disable-next-line\n  }, [isOpen]);\n\n  return (\n    <PopupWithForm\n      name=\"add-photo\"\n      title=\"Новое место\"\n      submitButtonText=\"Создать\"\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlayClick={onOverlayClick}\n      onSubmit={handleSubmit}\n      isLoading={isLoading}\n      preloaderText=\"Сохранение...\"\n      isDisabled={!isValid}\n    >\n      <ul className=\"form__inputs\">\n        <li className=\"form__field\">\n          <input\n            id=\"place-title-input\"\n            name=\"title\"\n            type=\"text\"\n            onChange={handleInputChange}\n            value={title || ''}\n            className=\"form__input form__input_type_place-title\"\n            placeholder=\"Название\"\n            required\n            minLength=\"3\"\n            maxLength=\"30\"\n          />\n          <span className=\"form__input-error\">{errors.title}</span>\n        </li>\n        <li className=\"form__field\">\n          <input\n            id=\"image-link-input\"\n            name=\"link\"\n            type=\"url\"\n            onChange={handleInputChange}\n            value={link || ''}\n            className=\"form__input form__input_type_image-link\"\n            placeholder=\"Ссылка на картинку\"\n            required\n          />\n          <span className=\"form__input-error\">{errors.link}</span>\n        </li>\n      </ul>\n    </PopupWithForm>\n  );\n};\n\nexport default AddPlacePopup;\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\n\r\n/**\r\n * @module DeleteConfirmPopup\r\n * @description Функциональный React-компонент<br>\r\n * Запрашивает подтверждение удаления карточки<br>\r\n * Принимает объект параметров props<br>\r\n * Возвращает JSX-фрагмент разметки попапа  подтверждения удаления карточки\r\n * @param {Object} props - объект параметров\r\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Function} props.onSubmit - функция-коллбэк сабмита попапа, удаляет карточку \r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт \r\n * @param {Boolean} props.isProcessing - индикатор статуса процесса удаления карточки: \r\n * true - карточка удаляется, false - ожидается подтверждение удаления карточки или отмена \r\n * @see {@link PopupWithForm}\r\n * @since v.2.0.4\r\n */\r\nfunction DeleteConfirmPopup(props) {\r\n  return (\r\n    <PopupWithForm\r\n      name=\"confirm\"\r\n      title=\"Вы уверены?\"\r\n      submitButtonText=\"Да\"\r\n      onClose={ props.onClose }\r\n      onOverlayClick={ props.onOverlayClick }\r\n      isOpen={ props.isOpen }\r\n      onSubmit={ props.onSubmit }\r\n      isLoading={ props.isProcessing }\r\n      preloaderText=\"Удаление...\"\r\n      isReadyToSubmit={ true }\r\n    />\r\n  );\r\n}\r\n\r\nexport default DeleteConfirmPopup;","/**\n * @module InfoToolTip\n * @description Функциональный React-компонент<br>\n * Попап с информационной подсказкой об успехе или ошибке регистрации в приложении<br>\n * Открывается при попытках пользователя зарегистрироваться или войти в приложение.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {String} props.name - имя пользователя, принимается для отображения в профиле на главной странице\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @param {Function} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\n * @param {String} props.titleTextSuccess - текст подсказки об успешной регистрации\n * @param {String} props.titleTextFail - текст подсказки об ошибке регистрации или авторизации\n * @param {Boolean} props.loggedIn - индикатор состояния пользователя, управляет его допуском в приложение:<br>\n *  - true - пользователь зарегистрирован и залогинился<br>\n *  - false - не зарегистрирован, не залогинился или вышел из приложения\n * @returns {JSX} - JSX-фрагмент разметки, попап с информационной подсказкой\n * @since v.2.1.0\n */\nfunction InfoToolTip({\n  name, isOpen, onClose, onOverlayClick, titleTextSuccess, titleTextFail, loggedIn,\n}) {\n  return (\n    <div onClick={onOverlayClick} className={`popup page__overlay page__overlay_theme_light popup_type_${name} ${isOpen ? 'popup_opened' : ''}`} id={name}>\n      <div className=\"popup__container\">\n        <button type=\"button\" onClick={onClose} className=\"button button_type_close popup__close-button popup__close-button_type_info-tool-tip\" name=\"close-popup\" value=\"Закрыть\"></button>\n        <div className=\"info-tool-tip popup__info-tool-tip\">\n          <div className={`info-tool-tip__image ${loggedIn ? 'info-tool-tip__image_type_success' : 'info-tool-tip__image_type_fail'}`}></div>\n          <p className=\"info-tool-tip__title\">{loggedIn ? titleTextSuccess : titleTextFail}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default InfoToolTip;\n","import React from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport { SIGNIN, SIGNUP } from '../utils/routesMap';\n\n/**\n * @module StartPageWithForm\n * @description Функциональный React-компонент<br>\n * Стартовая страница. Пропсами определяется тип страницы: страница авторизации или регистрации.\n *  Поля формы одинаковы для обоих типов страницы и также передаются в пропсах JSX-фрагментом.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {String} props.name - название, которое будет присвоено форме компонента\n * @param {String} props.title - заголовок формы\n * @param {Function} props.onSubmit -функция-коллбэк, вызывается при сабмите формы.\n * @param {Boolean} props.isLoading - индикатор состояния загрузки, используется для информирования пользовтаеля\n *  о том, что инициированный им процесс выполняется\n * @param {String} props.submitButtonText - текст, который будет отображаться на кнопке submit\n * @param {String} props.preloaderText - екст, отображаемый на кнопке сабмит во время загрузки, т.е. когда isLoading: true\n * @param {String} props.redirectTitleText - текст, перед перенаправляющей ссылкой (не текст ссылки)\n * @param {String} props.redirectLinkText - текст непосредственно перенаправляющей ссылки\n * @param {JSX} props.children - JSX - фрагмент\n * @returns {JSX} - JSX - фрагмент, страница регистрации или авторизации\n * @since v.2.1.0\n */\nfunction StartPageWithForm({\n  name,\n  title,\n  onSubmit,\n  isDisabled,\n  isLoading,\n  submitButtonText,\n  preloaderText,\n  redirectTitleText,\n  redirectLinkText,\n  children,\n}) {\n  return (\n    <div className=\"start-page-container page__start-page-container\">\n      <form\n        onSubmit={onSubmit}\n        className={`form start-page-container__form form_type_${name}`}\n        name={`${name}-form`}\n        id={`${name}-form`}\n      >\n        <h2 className=\"form__title form__title_type_start\">{title}</h2>\n        {children}\n        <button\n          type=\"submit\"\n          disabled={isDisabled}\n          className={`button ${isDisabled ? 'button_type_submit-inactive' : 'button_type_submit-start'} form__submit-button form__submit-button_type_start`}\n          name={`${name}-button`}\n          value={submitButtonText}\n        >\n          {isLoading ? preloaderText : submitButtonText}\n        </button>\n        <Switch>\n          <Route path={SIGNUP}>\n            <p className=\"form__redirect-title\">\n              {redirectTitleText}\n              <Link to={SIGNIN} className=\"form__redirect-link\">\n                {redirectLinkText}\n              </Link>\n            </p>\n          </Route>\n          <Route path={SIGNIN}>\n            <p className=\"form__redirect-title hidden-block\">\n              {redirectTitleText}\n              <Link to=\"#\" className=\"form__redirect-link hidden-block\">\n                {redirectLinkText}\n              </Link>\n            </p>\n          </Route>\n        </Switch>\n      </form>\n    </div>\n  );\n};\n\nexport default StartPageWithForm;\n","import React, { useEffect } from 'react';\nimport { useFormWithValidation } from '../hooks/useFormWithValidation';\nimport StartPageWithForm from './StartPageWithForm';\n\n/**\n * @module Login\n * @description Функциональный React-компонент<br>\n * Форма входа (авторизации) на стартовой странице приложения. После выхода из\n *  приложения пользователь имеет возможность сразу повторно войти в приложение не вводя\n *  свои учетные данные, т.к. они сохранены и вставлены в поля форму. Однако, если пользователь\n *  обновит страницу или закроет ее - данные сотрутся, форма очистится, потребуется повторная авторизация.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {Boolean} props.isLoading - индикатор состояния загрузки, используется для информирования пользовтаеля\n *  о том, что инициированный им процесс выполняется\n * @param {Function} props.handleLogin - функция-коллбэк, вызывается при сабмите формы входа, отправляет данные\n *  пользователя на сервер для проверки его регистрации и получения токена.\n * @param {Object} props.userData - объект с данными пользователя. Принимаются для подстановки в форму входа,\n * если пользователь выходит из приложения.\n * @param {String} props.userData.login - емэйл (логин), введенный пользователем при входе\n * @param {String} props.userData.password - пароль, введенный пользователем при входе\n * @returns {JSX} - JSX-фрагмент разметки, форма авторизации в приложении\n * @since v.2.1.0\n */\nfunction Login({ isLoading, handleLogin, userData }) {\n  /**\n   * Подключаем пользовательский хук работы с формой и валидации полей формы\n   * @ignore\n   */\n  const { values, errors, isValid, handleInputChange, resetForm } = useFormWithValidation();\n\n  const { login, password } = values;\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const userData = { password, login };\n    handleLogin(userData);\n  }\n\n  /**\n   * При первом выходе из приложения пользовательские данные подставляются в форму, пользователь может\n   *  сразу войти обратно. После обновления страницы данные сотрутся.\n   * @ignore\n   */\n  useEffect(() => {\n    resetForm({ login: userData.email, password: userData.password }, {});\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <StartPageWithForm\n      name='login'\n      title='Вход'\n      onSubmit={handleSubmit}\n      isDisabled={!isValid}\n      isLoading={isLoading}\n      submitButtonText='Войти'\n      preloaderText='Выполняется вход...'\n      redirectTitleText=\"Уже зарегистрированы? \"\n      redirectLinkText=\"Войти\"\n    >\n      <>\n        <ul className=\"form__inputs form__inputs_type_start\">\n          <li className=\"form__field form__field_type_start\">\n            <input\n              id=\"user-login\"\n              name=\"login\"\n              type=\"email\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={login || ''}\n              className=\"form__input form__input_type_start form__input_type_user-login\"\n              placeholder=\"Email\"\n              required\n            />\n            <span className=\"form__input-error\" id=\"user-login-input-error\">{errors.login || ''}</span>\n          </li>\n          <li className=\"form__field\">\n            <input\n              id=\"user-password\"\n              name=\"password\"\n              type=\"password\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={password || ''}\n              className=\"form__input form__input_type_start form__input_type_user-password\"\n              placeholder=\"Пароль\"\n              required\n              minLength=\"3\"\n              maxLength=\"35\"\n            />\n            <span className=\"form__input-error\" id=\"user-password-input-error\">{errors.password || ''}</span>\n          </li>\n        </ul>\n      </>\n    </StartPageWithForm>\n  );\n};\n\nexport default Login;\n","import React, { useEffect } from 'react';\nimport { useFormWithValidation } from '../hooks/useFormWithValidation';\nimport StartPageWithForm from './StartPageWithForm';\n\n/**\n * @module Register\n * @description Функциональный React-компонент<br>\n * Форма регистрации в приложении. Отправляет запрос на регистрацию пользователя.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {Boolean} props.isLoading - индикатор состояния загрузки, используется для информирования пользовтаеля\n *  о том, что инициированный им процесс выполняется\n * @param {Function} props.handleRegister - функция-коллбэк, вызывается при сабмите формы регистрации, отправляет данные\n *  пользователя на сервер для его регистрации.\n * @returns {JSX} - JSX-фрагмент разметки, форма регистрации в приложении\n * @since v.2.1.0\n */\nfunction Register({ isLoading, handleRegister }) {\n  /**\n   * Подключаем пользовательский хук работы с формой и валидации полей формы\n   * @ignore\n   */\n  const { values, errors, isValid, handleInputChange, resetForm } = useFormWithValidation();\n\n  const { regEmail, regPassword } = values;\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const userRegistrationData = {\n      email: regEmail,\n      password: regPassword\n    }\n    handleRegister(userRegistrationData);\n  };\n\n  /**\n   * При открытии или обновлении формы все ее поля очищаются.\n   * @ignore\n   */\n  useEffect(() => {\n    resetForm({}, {}, false);\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <StartPageWithForm\n      name='register'\n      title='Регистрация'\n      onSubmit={handleSubmit}\n      isDisabled={!isValid}\n      isLoading={isLoading}\n      submitButtonText='Зарегистрироваться'\n      preloaderText='Регистрация...'\n      redirectTitleText=\"Уже зарегистрированы? \"\n      redirectLinkText=\"Войти\"\n    >\n      <>\n        <ul className=\"form__inputs form__inputs_type_start\">\n          <li className=\"form__field form__field_type_start\">\n            <input\n              id=\"reg-email\"\n              name=\"regEmail\"\n              type=\"email\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={regEmail || ''}\n              className=\"form__input form__input_type_start form__input_type_reg-email\"\n              placeholder=\"Email\"\n              required\n            />\n            <span className=\"form__input-error\" id=\"user-email-input-error\">{errors.regEmail || ''}</span>\n          </li>\n          <li className=\"form__field\">\n            <input\n              id=\"reg-password\"\n              name=\"regPassword\"\n              type=\"password\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={regPassword || ''}\n              className=\"form__input form__input_type_start form__input_type_reg-password\"\n              placeholder=\"Пароль\"\n              required\n              minLength=\"3\"\n              maxLength=\"35\"\n            />\n            <span className=\"form__input-error\" id=\"reg-password-input-error\">{errors.regPassword || ''}</span>\n          </li>\n        </ul>\n      </>\n    </StartPageWithForm>\n  );\n}\n\nexport default Register;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { SIGNIN } from '../utils/routesMap';\n\n/**\n * @module ProtectedRoute\n * @description Функциональный компонент<br>\n * Защищенный роут, предотвращает доступ к приложению не зарегистрированных и не авторизованных пользователей.\n *  Принимает на вход компонент, доступ к которму нужно защитить, и пропсы, которые далее пробрасываются\n *  в переданный компонент. Доступ разрешается или запрещается в зависимости от состояния стейта loggedIn,\n *  которое устанавливается после проверки учетных данных пользователя.\n * @since v.2.1.0\n */\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n  return (\n    <Route>\n      {\n        () => props.loggedIn ? <Component { ...props } /> : <Redirect to={SIGNIN} />\n      }\n    </Route>\n  );\n};\n\nexport default ProtectedRoute;\n","export const TOKEN_KEY = 'token';\n\n/**\n * Метод сохранения токена в локальное хранилище браузера\n *@ignore\n */\nexport const setToken = (token) => {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\n/**\n * Метод получения токена из локального хранилища браузера\n * @ignore\n */\nexport const getToken = () => localStorage.getItem(TOKEN_KEY)\n\n/**\n * Метод удаления токена из локального хранилища браузера\n * @ignore\n */\nexport const removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n}\n","import * as PATH_TO_ from './endpoints';\n\nconst BASE_URL = 'https://auth.nomoreparties.co';\n\n/**\n * @module auth\n * @description Компонент, содержащий методы отправки запросов на регистрацию, авторизацию,\n *  проверку токена.\n * @returns {Promise}\n * @since v.2.1.0\n */\n\n/**\n * @method register\n * @description Отправляет запрос на регистрацию пользователя. Принимает аргументами данные\n *  пользователя, возвращает промис с данными, зарегистрированными на сервере.\n * @param {String} password - емэйл (логин), введенный пользователем при регистрации\n * @param {String} email -  пароль, введенный пользователем при регистрации\n * @returns {Promise}\n * @since v.2.1.0\n */\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}${PATH_TO_.REGISTER}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ password, email })\n  })\n    .then((res) => res.json())\n    .catch((err) => console.log(err));\n};\n\n/**\n * @method authorize\n * @description Отправляет запрос на авторизацию пользователя. Принимает аргументами данные\n *  пользователя, возвращает промис с токеном пользователя.\n * @param {String} password - емэйл (логин), введенный пользователем при авторизации\n * @param {String} email -  пароль, введенный пользователем при авторизации\n * @returns {Promise}\n * @since v.2.1.0\n */\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}${PATH_TO_.LOGIN}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ password, email })\n  })\n    .then((res) => res.json())\n    .catch((err) => console.log(err));\n};\n\n/**\n * @method getContent\n * @description Отправляет запрос на проверку токена пользователя. Принимает аргументом токен,\n *  если токен действующий - возвращает промис с данными пользователя.\n * @param {String} token - токен пользователя, хранящийся в локальном хранилище браузера\n * @returns {Promise}\n * @since v.2.1.0\n */\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}${PATH_TO_.USER}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  })\n    .then((res) => res.json())\n    .catch((err) => console.log(err));\n};\n","import React from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport api from '../utils/api';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport DeleteConfirmPopup from './DeleteConfirmPopup';\nimport InfoToolTip from './InfoToolTip';\nimport Login from './Login';\nimport Register from './Register';\nimport * as TO_ from '../utils/routesMap';\nimport ProtectedRoute from './ProtectedRoute';\nimport { getToken, setToken, TOKEN_KEY } from '../utils/token';\nimport * as auth from '../utils/auth';\nimport NavBar from './NavBar';\n\n/**\n * @description Классовый React-компонент<br>\n * Главный компонент приложения<br>\n * Собирает все компоненты приложения и декларирует их отрисовку<br>\n * @returns {JSX} - JSX-разметка приложения\n * @since v.2.0.0\n */\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    /**\n     * @description Объявление стейтов и установка их начальных значений\n     * @param {Object} state - объект со стейтами\n     * @property {Boolean} state.isEditProfilePopupOpen - стейт попапа редактирования профиля,\n     *  управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isAddPlacePopupOpen - стейт попапа добавления карточки,\n     * управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isEditAvatarPopupOpen - стейт попапа редактирования аватара,\n     * управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property{Boolean} state.isDeleteConfirmPopupOpen - стейт попапа подтверждения удаления\n     *  карточки, управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isImagePopupOpen - стейт попапа с полноразмерным изображением,\n     * управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Object | undefined} state.selectedCard - стейт кликнутой карточки,\n     * Может иметь одно из двух значений: объект с данными карточки или undefined.\n     * Начальное значение undefined - карточка не определена\n     * @property {Object} state.currentUser - стейт, сохраняет объект с данными о текущем пользователе\n     * @property {Array} state.cards - стейт, содержит массив объектов с данными карточек\n     * @property {Boolean} state.isLoading - стейт состояния процесса, true - процесс выполняется,\n     *  false- процесс не выполняется\n     * @property {Boolean} state.loggedIn - стейт статуса пользователя: залогинен (true)\n     *  или нет (false)\n     * @property {Object} state.userData - стейт, объект с данными пользователя\n     * @property {String} state.userData.email - емэйл пользователя (логин профиля)\n     * @property {String} state.userData.password - пароль, указанный пользователем при входе\n     * @property{String} state.userData.password - пароль профиля пользователя\n     * @property {Boolean} state.isInfoToolTipOpen - стейт попапа подсказки о результате авторизации,\n     *  управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isMenuOpened - стейт состояния меню на мобильном разрешении,\n     *  управляет изображением кнопки открытия/закрытия меню.\n     * @this App\n     */\n    this.state = {\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isDeleteConfirmPopupOpen: false,\n      isImagePopupOpen: false,\n      selectedCard: undefined,\n      currentUser: {},\n      cards: [],\n      isLoading: false,\n      loggedIn: false,\n      userData: {\n        email: '',\n        password: '',\n      },\n      isInfoToolTipOpen: false,\n      isMenuOpened: false,\n    };\n  }\n\n  /**\n   * @method  closeAllPopups\n   * @description Публичный метод<br>\n   * Стрелочная функция, закрывает все попапы, удаляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  closeAllPopups = () => {\n    document.removeEventListener('keydown', this.handleEscClose);\n    this.setState({\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isDeleteConfirmPopupOpen: false,\n      isImagePopupOpen: false,\n      selectedCard: undefined,\n      isInfoToolTipOpen: false,\n    });\n  }\n\n  /**\n  * @method handleEscClose\n  * @description Обработчик нажатия на клавишу Escape<br>\n  * Стрелочная функция, закрывает попап при нажатии клавиши Esc\n  * @param {Event} evt - событие\n  * @public\n  * @memberof App\n  * @instance\n  * @since v.2.0.0\n  */\n  handleEscClose = (evt) => {\n    if (evt.key === 'Escape') {\n      this.closeAllPopups();\n    }\n  }\n\n  /**\n   * @method handleClickOnOverlay\n   * @description Обработчик клика по оверлею<br>\n   * Стрелочная функция, закрывает попап при клике по оверлею\n   * @param {Event} evt - событие\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  handleClickOnOverlay = (evt) => {\n    /**\n     * Проверка истинности условия - клик по оверлею <br>\n     * Примечание: этот метод используется как обработчик в слушателе клика на оверлее попапа<br>\n     * Поэтому в данном случае условие проверяет совпадение клика именно на оверлее попапа\n     * @ignore\n     */\n    if (evt.target === evt.currentTarget) {\n      this.closeAllPopups();\n    }\n  }\n\n  /**\n  * @method handleCardLike\n  * @description Обработчик клика по иконке \"лайк\"<br>\n  * Стрелочная функция, принимает аргументом объект с данными карточки.\n  * Ставит или снимает \"лайки\", в зависимости от состояния \"лайка\".\n  * @param {Object} card - объект с данными лайкнутой карточки\n  * @param {String} card.id - id лайкнутой карточки\n  * @param {Array} card.likes - массив \"лайков\" лайкнутой карточки\n  * @public\n  * @memberof App\n  * @instance\n  * @since v.2.0.2\n  * @see {@link Card}\n  */\n  handleCardLike = (card) => {\n    const isLiked = card.likes.some((likeOwner) => likeOwner._id === this.state.currentUser._id);\n    api.changeLikeCardStatus(card.id, !isLiked)\n      .then((newCard) => {\n        const newCards = this.state.cards.map((cardsItem) => cardsItem.id === card.id\n          ? {\n            id: newCard._id,\n            link: newCard.link,\n            title: newCard.name,\n            likesQuantity: newCard.likes.length,\n            owner: newCard.owner,\n            likes: newCard.likes\n          }\n          : cardsItem);\n        this.setState({ cards: newCards });\n      })\n      .catch((err) => { console.log(err); });\n  };\n\n  /**\n   * @function handleCardClick\n   * @description Обработчик клика по изображению карточки<br>\n   * Стрелочная функция, открывает попап с полноразмерным изображением карточки,\n   * добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Card}\n   */\n  handleCardClick = (card) => {\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ selectedCard: card });\n    this.setState({ isImagePopupOpen: true });\n  }\n\n  /**\n   * @method handleCardDelete\n   * @description Обработчик клика по иконке \"удалить\"<br>\n   * Стрелочная функция, принимает аргументом объект с данными карточки и сохраняет его в стейт.\n   * Открывает попап подтверждения удаления карточки\n   * @param {Object} card - объект с данными удаляемой карточки\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.4\n   * @see {@link Card}\n   */\n  handleCardDelete = (card) => {\n    this.setState({ isDeleteConfirmPopupOpen: true });\n    this.setState({ selectedCard: card });\n  };\n\n  /**\n   * @function handleDeleteConfirm\n   * @description Обработчик подтверждения удаления карточки (сабмит попапа подтверждения удаления)<br>\n   * Стрелочная функция, удаляет карточку.\n   * @param {Event} evt - событие, принимается для отмены стандартного поведения формы при сабмите\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.4\n   * @see {@link Card}\n   * @see {@link DeleteConfirmPopup}\n   */\n  handleDeleteConfirm = (evt) => {\n    evt.preventDefault();\n    const card = this.state.selectedCard;\n    this.setState({ isLoading: true });\n\n    api.deleteCard(card.id)\n      .then(() => {\n        const newCards = this.state.cards.filter((cardsItem) => {\n          return cardsItem.id !== card.id\n        });\n        this.setState({ cards: newCards });\n        this.closeAllPopups();\n      })\n      .catch((err) => { console.log(err); })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  }\n\n  /**\n   * @method handleEditAvatarClick\n   * @description Обработчик клика по аватару<br>\n   * Стрелочная функция, открывает попап редактирования аватара, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Main}\n   */\n  handleEditAvatarClick = () => {\n    document.activeElement.blur();\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ isEditAvatarPopupOpen: true });\n  }\n\n  /**\n   * @function handleUpdateAvatar\n   * @description Обработчик сабмита формы редактирования аватара<br>\n   * Изменяет аватар пользователя.<br>\n   * Стрелочная функция, принимает объект с новой ссылкой на аватар пользователя,\n   * возвращает объект с изменнуми данными пользователя\n   * @param {Object} Object - объект с новой ссылкой на аватар пользователя\n   * @param {String} Object.avatar - новая ссылка на аватар пользователя\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.2\n   * @see {@link EditAvatarPopup}\n   */\n  handleUpdateAvatar = ({ avatar }) => {\n    this.setState({ isLoading: true });\n    api.editAvatar(avatar)\n      .then((res) => {\n        this.setState({ currentUser: res });\n        this.closeAllPopups();\n      })\n      .catch((err) => { console.log(err); })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  }\n\n  /**\n   * @method handleEditProfileClick\n   * @description Обработчик клика по кнопке \"Редактировать профиль\"<br>\n   * Стрелочная функция, открывает попап редактирования профиля, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Main}\n   */\n  handleEditProfileClick = () => {\n    document.activeElement.blur();\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ isEditProfilePopupOpen: true });\n  }\n\n  /**\n   * @function handleUpdateUser\n   * @description Обработчик сабмита формы редактирования профиля<br>\n   * Редактирует профиль пользователя.<br>\n   * Стрелочная функция, принимает объект с новыми данными профиля пользователя,\n   * возвращает объект с измененными данными профиля пользователя\n   * @param {Object} Object - объект с новыми данными профиля пользователя\n   * @param {String} Object.name - новое имя пользователя\n   * @param {String} Object.about - новое описание пользователя\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.2\n   * @see {@link EditProfilePopup}\n   */\n  handleUpdateUser = ({ name, about }) => {\n    this.setState({ isLoading: true });\n\n    api.editProfile({ name, about })\n      .then((res) => {\n        this.setState({ currentUser: res });\n        this.closeAllPopups();\n      })\n      .catch((err) => { console.log(err); })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  }\n\n  /**\n   * @method handleAddPlaceClick\n   * @description Обработчик клика по кнопке \"Добавить фото\"<br>\n   * Стрелочная функция, открывает попап добавления новой карточки, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Main}\n   */\n  handleAddPlaceClick = () => {\n    document.activeElement.blur();\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ isAddPlacePopupOpen: true });\n  }\n\n  /**\n   * @method handleAddPlaceSubmit\n   * @description Обработчик сабмита формы добавления новой карточки<br>\n   * Стрелочная функция, принимает аргументом объект с данными для создания карточки,\n   * возвращает карточку, полученную с сервера\n   * @param {Object} Object - объект с данными для создания карточки\n   * @param {String} Object.name - название карточки\n   * @param {String} Object.link - ссылка на изображение карточки\n   * @returns {Object} - объект с данными карточки, полученный от сервера\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.2\n   * @see {@link AddPlacePopup}\n   */\n  handleAddPlaceSubmit = ({ name, link }) => {\n    this.setState({ isLoading: true });\n\n    api.addNewCard({ name, link })\n      .then((newCard) => {\n        const obtainedCard = {\n          id: newCard._id,\n          link: newCard.link,\n          title: newCard.name,\n          likesQuantity: newCard.likes.length,\n          owner: newCard.owner,\n          likes: newCard.likes\n        };\n        const resultCardsArr = this.state.cards.concat(obtainedCard);\n        this.setState({ cards: resultCardsArr });\n        this.closeAllPopups();\n      })\n      .catch((err) => { console.log(err); })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  }\n\n  /**\n   * @method handleRegister\n   * @description Обработчик сабмита в форме регистрации<br>\n   *  Собирает данные, введенные пользователем в форму, отправляет запрос на создание\n   *  учетной записи пользователя, в случае успеха переадресовывает на форму входа в приложение.\n   * @param {Oblect} userData - объект с данными пользователя из формы регистрации\n   * @param {String} userData.email - емэйл (логин), введенный пользователем при регистрации\n   * @param {String} userData.password - пароль, введенный пользователем при регистрации\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link Register}\n   */\n  handleRegister = ({ password, email }) => {\n    this.setState({ isLoading: true });\n    /**\n     * Метод запроса на регистрацию пользователя\n     * @see auth\n     * @ignore\n     */\n    auth.register(password, email)\n      .then((res) => {\n        if (res.data) {\n          this.props.history.push(TO_.SIGNIN);\n        } else {\n          this.setState({\n            loggedIn: false,\n            isInfoToolTipOpen: true,\n          }, () => {\n            console.log(res);\n          });\n        }\n      })\n      .catch((err) => console.log(err))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  /**\n   * @method handleLogin\n   * @description Обработчик сабмита в форме входа<br>\n   * Собирает данные, введенные пользователем в форму, отправляет запрос на авторизацию пользователя,\n   *  в случае успеха данные пользователя из формы, сохраняет токен, полученный в ответе от сервера,\n   *  переадресовывает на главную страницу приложения.\n   * @param {Object} userData - объект с данными пользователя из формы входа\n   * @param {String} userData.login - емэйл (логин), введенный пользователем при входе\n   * @param {String} userData.password - пароль, введенный пользователем при входе\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link Login}\n   */\n  handleLogin = ({ password, login }) => {\n    this.setState({ isLoading: true });\n    /**\n     * Метод запроса на авторизацию пользователя\n     * @see auth\n     * @ignore\n     */\n    auth.authorize(password, login)\n      .then((res) => {\n        if (res.token) {\n          setToken(res.token);\n          this.setState({\n            loggedIn: true,\n            userData: {\n              email: login,\n              password,\n            },\n            isInfoToolTipOpen: true,\n          }, () => {\n            this.props.history.push(TO_.MAIN);\n          });\n        } else {\n          this.setState({\n            loggedIn: false,\n            isInfoToolTipOpen: true,\n          }, () => {\n            console.log(res);\n          });\n        }\n      })\n      .catch((err) => console.log(err))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  /**\n   * @method tokenCheck\n   * @description Метод проверки токена<br>\n   * Если в локальном хранилище браузера сохранен токен, метод отправляет его на сервер для проверки\n   *  его действительности. Если токен действующий - пользователь сразу автоматически авторизуется\n   *  и перенаправляется на главную страницу приложения со своими учетными данными.\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link App}\n   */\n  tokenCheck = () => {\n    const token = getToken();\n    if (token) {\n      /**\n       * Метод запроса проверки токена\n       * @see auth\n       * @igore\n       */\n      auth.getContent(token)\n        .then((res) => {\n          if (res.data) {\n            this.setState({\n              loggedIn: true,\n              userData: { email: res.data.email }\n            }, () => {\n              this.props.history.push(TO_.MAIN);\n            });\n          } else {\n            this.setState({\n              loggedIn: false,\n              isInfoToolTipOpen: true,\n            }, () => {\n              console.log(res);\n            });\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  /**\n   * @method handleSignoutButtonClick\n   * @description Обработчик клика по кнопке \"Выйти\"<br>\n   * Пользователь выходит из профиля на форму входа, токен пользователя удаляется.\n   *  Для входа в приложение требуется повторная авторизация.\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link NavBar}\n   */\n  handleSignoutButtonClick = () => {\n    this.setState({ isMenuOpened: false });\n    localStorage.removeItem(TOKEN_KEY);\n    this.props.history.push(TO_.SIGNIN);\n  }\n\n  /**\n   * @method handleMenuButtonClick\n   * @description Обработчик клика по кнопке открытия/закрытия меню<br>\n   * Открывает или закрывает меню, содержащее ссылки на профил пользователя и выход из приложения.\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link NavBar}\n   */\n  handleMenuButtonClick = () => {\n    this.setState({ isMenuOpened: !this.state.isMenuOpened });\n  }\n\n  /**\n   * При монтировании компонента загружаем с сервера актуальные данные профиля пользователя\n   * и карточки\n   * @ignore\n   */\n  componentDidMount() {\n    this.tokenCheck();\n    Promise.all([api.loadUserData(), api.loadCards()])\n      .then(([currentUserData, initialCardsData]) => {\n        this.setState({ currentUser: currentUserData });\n\n        /**\n         * @description массив объектов с деструктурированными данными карточек\n         * @param {Object} initialCardsData - массив объектов с данными карточек, полученный\n         * после успешного запроса на сервер\n         * @constant {Object} initialCards - новый массив объектов с данными карточек\n         * @property {String} initialCards.id - уникальный id карточки\n         * @property {String} initialCards.link - ссылка на изображение карточки\n         * @property {String} initialCards.title - название карточки\n         * @property {Number} initialCards.likesQuantity - число, количество лайков у карточки\n         * @property {Object} initialCards.owner - объект, данные о владельце карточки\n         * @property {Array} initialCards.likes - массив, содержит id всех пользователей, лайкнувших карточку\n         * @ignore\n         */\n        const initialCards = initialCardsData.map((initialCard) => ({\n          id: initialCard._id,\n          link: initialCard.link,\n          title: initialCard.name,\n          likesQuantity: initialCard.likes.length,\n          owner: initialCard.owner,\n          likes: initialCard.likes\n        }));\n        this.setState({ cards: initialCards });\n      })\n      .catch(err => { console.log(err); });\n  }\n\n  /**\n   * @method render\n   * @description Публичный метод<br>\n   * Отрисовывает основные компоненты приложения.\n   * @public\n   * @instance\n   * @memberof App\n   * @since v.2.0.0\n   * @this App\n   */\n  render() {\n    return (\n      <>\n        <CurrentUserContext.Provider value={this.state.currentUser}>\n\n          <NavBar\n            signOutButtonText=\"Выйти\"\n            handleSignoutButtonClick={this.handleSignoutButtonClick}\n            email={this.state.userData.email}\n            handleMenuClick={this.handleMenuButtonClick}\n            isMenuOpened={this.state.isMenuOpened}\n            isDropdownMenu={true}\n          />\n\n          <Header\n            signinLinkText=\"Войти\"\n            signupLinkText=\"Регистрация\"\n            signOutButtonText=\"Выйти\"\n            handleSignoutButtonClick={this.handleSignoutButtonClick}\n            email={this.state.userData.email}\n            handleMenuClick={this.handleMenuButtonClick}\n            isMenuOpened={this.state.isMenuOpened}\n            isDropdownMenu={false}\n          />\n\n          <Switch>\n            <ProtectedRoute\n              path={TO_.MAIN} exact\n              loggedIn={this.state.loggedIn}\n              onEditProfile={this.handleEditProfileClick}\n              onAddPlace={this.handleAddPlaceClick}\n              onEditAvatar={this.handleEditAvatarClick}\n              onCardClick={this.handleCardClick}\n              onCardLike={this.handleCardLike}\n              onCardDelete={this.handleCardDelete}\n              cards={this.state.cards}\n              component={Main}\n            />\n\n            <Route path={TO_.SIGNUP}>\n              <Register\n                isLoading={this.state.isLoading}\n                handleRegister={this.handleRegister}\n              />\n            </Route>\n\n            <Route path={TO_.SIGNIN}>\n              <Login\n                isLoading={this.state.isLoading}\n                handleLogin={this.handleLogin}\n                userData={this.state.userData}\n              />\n            </Route>\n\n            <Route path={TO_.MAIN}>\n              {!this.state.loggedIn ? <Redirect to={TO_.SIGNIN} /> : <Redirect to={TO_.MAIN} />}\n            </Route>\n          </Switch>\n\n          <Footer />\n\n          <EditProfilePopup\n            isOpen={this.state.isEditProfilePopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onUpdateUser={this.handleUpdateUser}\n            isLoading={this.state.isLoading}\n          />\n\n          <EditAvatarPopup\n            isOpen={this.state.isEditAvatarPopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onUpdateAvatar={this.handleUpdateAvatar}\n            isLoading={this.state.isLoading}\n          />\n\n          <AddPlacePopup\n            isOpen={this.state.isAddPlacePopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onSubmit={this.handleAddPlaceSubmit}\n            isLoading={this.state.isLoading}\n          />\n\n          <DeleteConfirmPopup\n            isOpen={this.state.isDeleteConfirmPopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onSubmit={this.handleDeleteConfirm}\n            isProcessing={this.state.isLoading}\n          />\n\n          <ImagePopup\n            card={this.state.selectedCard}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            isOpen={this.state.isImagePopupOpen}\n          />\n\n          <InfoToolTip\n            name=\"info-tool-tip\"\n            isOpen={this.state.isInfoToolTipOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            titleTextSuccess=\"Вы успешно зарегистрировались!\"\n            titleTextFail=\"Что-то пошло не так! Попробуйте ещё раз.\"\n            loggedIn={this.state.loggedIn}\n          />\n\n        </CurrentUserContext.Provider>\n      </>\n    );\n  }\n}\n\nexport default withRouter(App);\n","/**\n * Эндпоинты\n * @ignore\n */\nexport const LOGIN = '/signin';\n\nexport const REGISTER = '/signup';\n\nexport const USER = '/users/me'","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { BrowserRouter } from 'react-router-dom';\n\n/**\n * @module index\n * @description Файл index.js - точка входа для всего приложения<br>\n * Метод ReactDOM.render() - отрисовывает главный компонент приложения App в DOM\n */\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}