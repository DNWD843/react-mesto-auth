{"version":3,"sources":["components/NavBar.js","images/headerLogo.svg","utils/routesMap.js","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","utils/api.js","components/PopupWithForm.js","hooks/useFormWithValidation.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeleteConfirmPopup.js","components/InfoToolTip.js","components/StartPageWithForm.js","components/Login.js","components/Register.js","components/ProtectedRoute.js","utils/token.js","utils/auth.js","components/App.js","utils/endpoints.js","index.js"],"names":["NavBar","email","handleSignoutButtonClick","signOutButtonText","handleMenuClick","isMenuOpened","isDropdownMenu","navbarClassName","classNames","navbar_type_mobile","navbar_opened","menuButtonClassName","className","to","onClick","type","title","defaultProps","MAIN","SIGNIN","SIGNUP","Header","signupLinkText","signinLinkText","props","src","headerLogoPath","alt","path","exact","CurrentUserContext","React","createContext","Card","id","link","likesQuantity","owner","likes","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","_id","isLiked","some","likeOwner","cardDeleteButtonClassName","cardLikeButtonClassName","name","value","Main","onEditAvatar","onEditProfile","onAddPlace","cards","style","backgroundImage","avatar","about","map","card","Footer","ImagePopup","onOverlayClick","onClose","isOpen","popupClassName","popupCloseButtonClassName","api","URLs","headers","token","this","_baseURL","baseURL","_cardsURL","cardsURL","_userURL","userURL","_likesURL","likesURL","_avatarURL","avatarURL","_headers","_token","fetch","authorization","then","res","ok","json","Promise","reject","status","item","method","body","JSON","stringify","cardId","likeStatus","PopupWithForm","onSubmit","isDisabled","isLoading","submitButtonText","preloaderText","children","popup_opened","popupFormClassName","popupFormSubmitButtonClassName","button_type_submit","disabled","useFormWithValidation","useState","values","setValues","errors","setErrors","isValid","setIsValid","resetForm","useCallback","newValues","newErrors","newIsValid","handleInputChange","event","target","validationMessage","closest","checkValidity","EditProfilePopup","onUpdateUser","description","useEffect","evt","preventDefault","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","AddPlacePopup","DeleteConfirmPopup","isProcessing","InfoToolTip","titleTextSuccess","titleTextFail","loggedIn","popupImageClassName","proTypes","PropTypes","string","bool","isRequired","func","StartPageWithForm","redirectTitleText","redirectLinkText","formClassName","submitButtonClassName","Login","handleLogin","userData","login","password","onFocus","Register","handleRegister","regEmail","regPassword","ProtectedRoute","Component","component","TOKEN_KEY","BASE_URL","App","closeAllPopups","document","removeEventListener","handleEscClose","setState","isEditProfilePopupOpen","isAddPlacePopupOpen","isEditAvatarPopupOpen","isDeleteConfirmPopupOpen","isImagePopupOpen","selectedCard","isInfoToolTipOpen","key","handleClickOnOverlay","currentTarget","handleCardLike","state","changeLikeCardStatus","newCard","newCards","cardsItem","length","catch","err","console","log","handleCardClick","addEventListener","handleCardDelete","handleDeleteConfirm","deleteCard","filter","finally","handleEditAvatarClick","activeElement","blur","handleUpdateAvatar","editAvatar","handleEditProfileClick","handleUpdateUser","editProfile","handleAddPlaceClick","handleAddPlaceSubmit","addNewCard","obtainedCard","resultCardsArr","concat","auth","data","history","push","TO_","localStorage","setItem","tokenCheck","getItem","Authorization","removeItem","handleMenuButtonClick","all","loadUserData","loadCards","currentUserData","initialCardsData","initialCards","initialCard","Provider","withRouter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.df30fc6f.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/**\n * @module NavBar\n * @description Функциональный React-компонент<br>\n * Представляет собой меню со ссылками на профиль пользователя и выход из приложения.<br>\n * Меню ссылок NavBar  определяется в двух местах приложения:<br>\n *  * над хэдером - для мобильных разрешений;<br>\n *  * в хэдере - для десктопных разрешений.<br>\n *  На мобильных разрешениях меню скрыто над хэдером, выезжает сверху вниз при нажатии на кнопку управления меню,\n *  расположенную в хэдере(меню из десктопных разрешений преобразуется в кнопку)<br>\n *  На десктопных разрешениях расположено в хэдере, представляет собой меню со ссылками без кнопки открытия/закрытия,\n *  меню для мобильных разрешений (над хэдером) на десктопных разрешениях отключено.<br>\n * Анимация выезда меню сверху и трансформация меню в хэдере в кнопку управления реализованы средствами CSS.\n * (См. blocks\\navbar)\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {String} props.email - емэйл (логин), введенный пользователем при входе в приложение\n * @param {Function} props.handleSignoutButtonClick - функция-коллбэк, вызывается при клике по \"Выйти\", выход из профиля\n * на страницу входа (авторизации)\n * @param {String} props.signOutButtonText - текст, который будет отображен на кнопке выхода из профиля. <b>Не обязательный пропс.\n *  Значение по умолчанию: \"Выйти\"</b>\n * @param {Function} props.handleMenuClick - функция-коллбэк, вызывается при клике по иконке \"Меню\", открывает или\n *  закрывает меню на мобильных разрешениях\n * @param {Boolean} props.isMenuOpened - индикатор состояния меню:<br>\n *  - true - меню открыто<br>\n *  - false - меню закрыто\n * @param {Boolean} props.isDropdownMenu - пропс, определяющий как будет отрисован компонент:<br>\n *  - true - для мобильных разрешений экрана(на десктопных разрешениях меню скрыто), меню будет отрисовано как выпадающее меню,\n *  при этом меню из десктопных разрешений преобразуется в кнопку управления<br>\n *   - false - для десктопных разрешений (на мобильных разрешениях меню преобразуется в кнопку управления меню), меню будет\n *  отрисовано статичным списком ссылок без кнопки открытия/закрытия.<br>\n * <b>Внимание!</b> Этот пропс задается вручную и не является стейтом.\n * @returns {JSX}\n * @since v.2.1.0\n */\nfunction NavBar({\n  email,\n  handleSignoutButtonClick,\n  signOutButtonText,\n  handleMenuClick,\n  isMenuOpened,\n  isDropdownMenu,\n}) {\n  const navbarClassName = classNames(\"navbar\", {\n    navbar_type_mobile: isDropdownMenu,\n    navbar_opened: isDropdownMenu && isMenuOpened,\n  });\n\n  const menuButtonClassName = classNames(\"button\", \"navbar__menu-button\", {\n    \"navbar__menu-button_type_close\": isMenuOpened,\n    \"navbar__menu-button_type_open\": !isMenuOpened,\n  });\n\n  return (\n    <>\n      <ul className={navbarClassName}>\n        <li className=\"navbar__item\">\n          <Link to=\"#\" className=\"navbar__link\">\n            {email}\n          </Link>\n        </li>\n        <li className=\"navbar__item\">\n          <button\n            onClick={handleSignoutButtonClick}\n            className=\"button button_type_signout navbar__button-signout\"\n          >\n            {signOutButtonText}\n          </button>\n        </li>\n      </ul>\n      {!isDropdownMenu && (\n        <button\n          type=\"button\"\n          title=\"Меню\"\n          onClick={handleMenuClick}\n          className={menuButtonClassName}\n        ></button>\n      )}\n    </>\n  );\n}\n\nNavBar.propTypes = {\n  email: PropTypes.string.isRequired,\n  handleSignoutButtonClick: PropTypes.func.isRequired,\n  signOutButtonText: PropTypes.string,\n  handleMenuClick: PropTypes.func.isRequired,\n  isMenuOpened: PropTypes.bool.isRequired,\n  isDropdownMenu: PropTypes.bool.isRequired,\n};\n\nNavBar.defaultProps = {\n  signOutButtonText: \"Выйти\",\n};\n\nexport default NavBar;\n","export default __webpack_public_path__ + \"static/media/headerLogo.a307e1c4.svg\";","/**\n * Роуты\n * @ignore\n */\nexport const MAIN = \"/\";\n\nexport const SIGNIN = \"/sign-in\";\n\nexport const SIGNUP = \"/sign-up\";\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport headerLogoPath from \"../images/headerLogo.svg\";\nimport { SIGNIN, SIGNUP, MAIN } from \"../utils/routesMap\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @module Header\n * @description Функциональный React-компонент Header<br>\n * Принимает объект параметров - props<br>\n * Возвращает JSX-фрагмент разметки - \"шапку\" страницы приложения\n * @param {Object} props - объект параметров\n * @param {String} props.signupLinkText - текст ссылки на регистрацию.\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Регистрация\"</b>\n * @param {String} props.signinLinkText - текст ссылки на авторизацию.\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Войти\"</b>\n * @param {Object} props....props - пропсы, пробрасываемые в компонент NavBar\n * @returns {JSX} - JSX-фрагмент разметки, блок Header\n * @see {@link NavBar}\n * @since v.2.0.0\n */\nfunction Header({ signupLinkText, signinLinkText, ...props }) {\n  return (\n    <header className=\"header page__header\">\n      <img\n        className=\"header__logo\"\n        src={headerLogoPath}\n        alt=\"логотип проекта 'Место-Россия'\"\n      />\n      <Switch>\n        <Route path={SIGNIN}>\n          <Link to={SIGNUP} className=\"header__link\">\n            {signupLinkText}\n          </Link>\n        </Route>\n        <Route path={SIGNUP}>\n          <Link to={SIGNIN} className=\"header__link\">\n            {signinLinkText}\n          </Link>\n        </Route>\n        <Route path={MAIN} exact>\n          <NavBar {...props} />\n        </Route>\n      </Switch>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  signupLinkText: PropTypes.string,\n  signinLinkText: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  signupLinkText: \"Регистрация\",\n  signinLinkText: \"Войти\",\n};\n\nexport default Header;\n","import React from \"react\";\n\nexport const CurrentUserContext = React.createContext({});\n","import React from \"react\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/**\n * @module Card\n * @description Функциональный React-компонент<br>\n * Декларирует отрисовку карточки<br>\n * Принимает объект параметров - props<br>\n * Возвращает JSX-фрагмент разметки - карточку, заполненный данными карточки<br>\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\n * @param {String} props.id - уникальный идентификатор карточки, присваивается карточке сервером.<br>\n * <b>ПРИМЕЧАНИЕ: props.id используется при отрисовке компонента Card для присвоения обязательному параметру key</b>\n * @param {String} props.link - ссылка на изображение\n * @param {String} props.title - название изображения\n * @param {Number} props.likesQuantity - количество лайков\n * @param {Object} props.owner - объект, данные о владельце карточки\n * @param {Array} props.likes - массив, содержит id всех пользователей, лайкнувших карточку\n * @param {Function} props.onCardClick - функция-колбэк, вызывается при клике по изображению карточки,\n * открывает попап с полноразмерным изображением карточки<br>\n * Принимает аргументом объект с названием карточки и ссылкой на изображение для дальнейшей передачи\n * этих параметров в ImagePopup\n * @param {Function} props.onCardLike -  функция-колбэк, вызывается при клике по \"лайку\" карточки,\n * ставит/снимает \"лайки\", принимает аргументом объект с id карточки и массивом лайков карточки\n * @param {Function} props.onCardDelete - функция-колбэк, вызывается при клике по иконке удаления карточки,\n * открывает попап подтверждения удаления, принимает аргументом объект с id карточки\n * @returns {JSX} - JSX-фрагмент разметки, элемент card\n * @since v.2.0.0\n */\nfunction Card({\n  id,\n  link,\n  title,\n  likesQuantity,\n  owner,\n  likes,\n  onCardClick,\n  onCardLike,\n  onCardDelete,\n}) {\n  const currentUser = React.useContext(CurrentUserContext);\n\n  const isOwn = owner._id === currentUser._id;\n\n  const isLiked = likes.some((likeOwner) => likeOwner._id === currentUser._id);\n\n  const cardDeleteButtonClassName = classNames(\n    \"button\",\n    \"button_type_delete\",\n    \"card__delete-button\",\n    isOwn && \"card__delete-button_enabled\"\n  );\n\n  const cardLikeButtonClassName = classNames(\n    \"button\",\n    \"button_type_like\",\n    \"card__like-button\",\n    {\n      \"button_like-status_checked\": isLiked,\n      \"button_like-status_not-checked\": !isLiked,\n    }\n  );\n\n  /**\n   * @method handleImageClick\n   * @description Обработчик клика по изображению карточки, вызывает коллбэк props.onCardClick и передает ему данные карточки\n   * @argument {Object} object - объект с данными карточки, аргумент коллбэка props.onCardClick\n   * @param {String} object.link - ссылка на изображение кликнутой карточки\n   * @param {String} object.title - название кликнутой карточки\n   * @public\n   * @since v.2.0.0\n   */\n  const handleImageClick = () => {\n    onCardClick({ link, title });\n  };\n\n  /**\n   * @method handleLikeClick\n   * @description Обработчик клика по \"лайку\" карточки, вызывает коллбэк props.onCardLike и передает ему данные карточки\n   * @argument {Object} object - объект с данными карточки, аргумент коллбэка props.onCardLike\n   * @param {String} object.id - id лайкнутой карточки\n   * @param {String} object.likes - массив \"лайков\" лайкнутой карточки\n   * @public\n   * @since v.2.0.2\n   */\n  const handleLikeClick = () => {\n    onCardLike({ id, likes });\n  };\n\n  /**\n   * @method handleDeleteClick\n   * @description Обработчик клика по иконке \"удалить\", вызывает коллбэк props.onCardDelete и передает ему id карточки\n   * @argument {Object} object - объект с данными удаляемой карточки, аргумент коллбэка props.onCardDelete\n   * @param {String} object.id - id удаляемой карточки\n   * @public\n   * @since v.2.0.2\n   */\n  const handleDeleteClick = () => {\n    onCardDelete({ id });\n  };\n\n  return (\n    <li className=\"card\">\n      <img\n        className=\"card__image\"\n        onClick={handleImageClick}\n        src={link}\n        alt={title}\n        name=\"photo\"\n        title=\"Открыть фото\"\n      />\n      <button\n        type=\"button\"\n        onClick={handleDeleteClick}\n        className={cardDeleteButtonClassName}\n        name=\"delete-button\"\n        value=\"delete\"\n        title=\"Удалить фото\"\n      ></button>\n      <div className=\"card__description\">\n        <h2 className=\"card__title\">{title}</h2>\n        <div className=\"card__like-info\">\n          <button\n            type=\"button\"\n            onClick={handleLikeClick}\n            className={cardLikeButtonClassName}\n            name=\"like-button\"\n            value=\"like\"\n          ></button>\n          <span className=\"card__like-counter\">{likesQuantity}</span>\n        </div>\n      </div>\n    </li>\n  );\n}\n\nCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  link: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  likesQuantity: PropTypes.number.isRequired,\n  owner: PropTypes.object.isRequired,\n  likes: PropTypes.array.isRequired,\n  onCardClick: PropTypes.func.isRequired,\n  onCardLike: PropTypes.func.isRequired,\n  onCardDelete: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React from \"react\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport Card from \"./Card\";\nimport PropTypes from 'prop-types';\n\n/**\n * @module Main\n * @description Функциональный React-компонент<br>\n * Декларирует отрисовку основного контента приложения: профиль пользователя, карточки с изображениями<br>\n * В компонент Main импортируются:<br>\n *  - api - экземпляр класса Api <br>\n *  - Card - компонент Card<br>\n * Принимает объект параметров - props<br>\n * Возвращает JSX-фрагмент разметки основного контента приложения\n * @param {Object} props - объект с переданными функциями-коллбэками\n * @param {Function} props.onAddPlace - функция-коллбэк, вызывается при клике по кнопке \"Добавить фото\", открывает попап добавления карточки\n * @param {Function} props.onCardClick - функция-коллбэк, вызывается при клике по изображению карточки, открывает попап с полноразмерным изображением карточки<br>\n * <b>ПРИМЕЧАНИЕ</b> В компоненте Main не используется. Через пропсы компонента Main пробрасывается в компонент Card.\n * @param {Function} props.onEditAvatar - функция-коллбэк, вызывается при клике по аватару пользователя, открывает попап редактирования аватара пользователя\n * @param {Function} props.onEditProfile - функция-коллбэк, вызывается при клике по кнопке \"Редактировать профиль\", открывает попап редактирования профиля\n * @param {Function} props.onCardDelete - функция-коллбэк, вызывается при клике по иконке удаления карточки, открывает попап подтверждения удаления карточки\n * @param {Function} props.onCardLike - функция-коллбэк, вызывается при клике по \"лайку\" карточки, ставит или удаляет \"лайк\", в зависимости от его состояния\n * @param {Array} props.cards - массив объектов(карточек)\n * @returns {JSX} - JSX-фрагмент разметки, блок main\n * @see {@link Api}\n * @see {@link Card}\n * @since v.2.0.0\n */\nfunction Main({\n  onEditAvatar,\n  onEditProfile,\n  onAddPlace,\n  onCardClick,\n  onCardLike,\n  onCardDelete,\n  cards,\n}) {\n  const currentUser = React.useContext(CurrentUserContext);\n\n  return (\n    <main className=\"content page__content\">\n      <section\n        className=\"user-profile content__user-profile\"\n        key=\"user-profile\"\n      >\n        <button\n          type=\"button\"\n          onClick={onEditAvatar}\n          className=\"button  user-profile__avatar-button\"\n          style={{ backgroundImage: `url(${currentUser.avatar})` }}\n          name=\"edit-avatar-form-button\"\n          id=\"edit-avatar-form-button\"\n          value=\"Добавить аватар\"\n          title=\"Изменить аватар\"\n        ></button>\n        <div className=\"user-profile__user-info\">\n          <h1 className=\"user-profile__user-name\">{currentUser.name}</h1>\n          <button\n            type=\"button\"\n            onClick={onEditProfile}\n            className=\"button button_type_edit user-profile__edit-button\"\n            name=\"edit-profile-form-button\"\n            id=\"edit-profile-form-button\"\n            value=\"Открыть форму\"\n            title=\"Редактировать профиль\"\n          ></button>\n          <p className=\"user-profile__user-job\">{currentUser.about}</p>\n        </div>\n        <button\n          type=\"button\"\n          onClick={onAddPlace}\n          className=\"button button_type_add user-profile__add-button\"\n          name=\"add-photo-form-button\"\n          id=\"add-photo-form-button\"\n          value=\"Добавить фото\"\n          title=\"Добавить фото\"\n        ></button>\n      </section>\n\n      <section className=\"photo content__photo\" key=\"photo-cards\">\n        <ul className=\"photo__cards\">\n          {cards.map((card) => (\n            <Card\n              key={card.id}\n              {...card}\n              onCardClick={onCardClick}\n              onCardLike={onCardLike}\n              onCardDelete={onCardDelete}\n            />\n          ))}\n        </ul>\n      </section>\n    </main>\n  );\n}\n\nMain.propTypes = {\n  onEditAvatar: PropTypes.func.isRequired,\n  onEditProfile: PropTypes.func.isRequired,\n  onAddPlace: PropTypes.func.isRequired,\n  onCardClick: PropTypes.func.isRequired,\n  onCardLike: PropTypes.func.isRequired,\n  onCardDelete: PropTypes.func.isRequired,\n  cards: PropTypes.array.isRequired,\n};\n\nexport default Main;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { MAIN } from \"../utils/routesMap\";\n\n/**\n * @module Footer\n * @description Функциональный React-компонент Footer<br>\n * Возвращает JSX-фрагмент разметки - \"подвал\" страницы приложения\n * @returns {JSX} - JSX-фрагмент разметки, блок Footer\n * @since v.2.0.0\n */\nfunction Footer() {\n  return (\n    <Route path={MAIN} exact>\n      <footer className=\"footer\">\n        <p className=\"footer__copyright\">&#169; 2020 Mesto Russia</p>\n      </footer>\n    </Route>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/**\n * @module ImagePopup\n * @description Функциональный React-компонент<br>\n * Открывает изображение карточки в полном размере<br>\n * Принимает объект параметров - props<br>\n * Возвращает JSX-фрагмент разметки - попап с полноразмерным изображением карточки<br>\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\n * @param {Object} props.card - объект с данными карточки\n * @param {String} props.card.link - ссылка на изображение карточки\n * @param {String} props.card.title - название карточки\n * @param {Function} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @returns {JSX} - JSX-фрагмент разметки, попап с полноразмерным изображением карточки\n * @since v.2.0.0\n */\nfunction ImagePopup({ onOverlayClick, onClose, isOpen, card }) {\n  const popupClassName = classNames(\n    \"popup\",\n    \"page__overlay\",\n    \"page__overlay_theme_dark\",\n    \"popup_type_view-photo\",\n    isOpen && \"popup_opened\"\n  );\n\n  const popupCloseButtonClassName = classNames(\n    \"button\",\n    \"button_type_close\",\n    \"popup__close-button\",\n    \"popup__close-button_type_photo\"\n  );\n\n  return (\n    <div onClick={onOverlayClick} className={popupClassName} id=\"view\">\n      <div className=\"popup__container\">\n        <button\n          type=\"button\"\n          onClick={onClose}\n          className={popupCloseButtonClassName}\n          name=\"close-photo\"\n          value=\"Закрыть фото\"\n        ></button>\n        <figure className=\"popup__photo-content\">\n          <img\n            className=\"popup__place-image\"\n            src={`${card ? card.link : \"#\"}  `}\n            alt={`${card ? card.title : \"изображение\"}`}\n          />\n          <figcaption className=\"popup__place-name\">{`${\n            card ? card.title : \"изображение\"\n          }`}</figcaption>\n        </figure>\n      </div>\n    </div>\n  );\n}\n\nImagePopup.propTypes = {\n  onOverlayClick: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  card: PropTypes.object.isRequired,\n};\n\nexport default ImagePopup;\n","/**\n * @description  Класс Api <br>\n * Отвечает за отправку запросов на сервер и проверку полученных ответов\n * @param {Object} Object - принимает в конструктор объект { URLs, headers, token }\n * @param {Object} Object.URLs  - объект, содержащий адреса для отправки запросов\n * @param {String} Object.URLs.baseURL - базовый URL сервера\n * @param {String} Object.URLs.cardsURL - URL для получения/добавления карточек\n * @param {String} Object.URLs.userURL - URLдля получения/добавления данных пользователя\n * @param {String} Object.URLs.likesURL - URL для получения/добавления информации о \"лайках\"\n * @param {String} Object.URLs.avatarURL - URL для получения/добавления ссылки на аватар\n * @param {Object} Object.headers - объект, содержащий заголовки запросов\n * @param {String} Object.headers.authorization - код авторизации (токен)\n * @param {String} Object.token  - токен для доступа на сервер\n * @since v.1.0.0\n * @example\n * const api = new Api({\n * URLs: {\n *   baseURL: 'https://mesto...',\n *   cardsURL: 'https://mesto.../cards/',\n *   userURL: 'https://mesto.../users/me',\n *   likesURL: 'https://mesto.../cards/likes/',\n *   avatarURL: 'https://mesto.../users/me/avatar'\n * },\n * headers: {\n *   \"authorization\": '<Ваш код авторизации>'\n * },\n * token: '<Ваш токен>'\n * });\n */\nclass Api {\n  constructor({ URLs, headers, token }) {\n    this._baseURL = URLs.baseURL;\n    this._cardsURL = URLs.cardsURL;\n    this._userURL = URLs.userURL;\n    this._likesURL = URLs.likesURL;\n    this._avatarURL = URLs.avatarURL;\n    this._headers = headers;\n    this._token = token;\n  }\n\n  /**\n   * @description  Публичный метод<br>\n   * Загружает с сервера данные пользователя\n   * @public\n   * @returns {Promise} - возвращает промис с данными пользователя\n   * @since v.1.0.0\n   */\n  loadUserData() {\n    return fetch(this._userURL, {\n      headers: {\n        authorization: this._token,\n      },\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  /**\n   * @description  Публичный метод<br>\n   * Загружает элементы с сервера\n   * @public\n   * @returns {Promise} - возвращает промис с данными элементов, сохраненных на сервере\n   * @since v.1.0.0\n   */\n  loadCards() {\n    return fetch(this._cardsURL, {\n      headers: {\n        authorization: this._token,\n      },\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  /**\n   * @description Публичный метод<br>\n   * Сохраняет на сервер элемент, добавленный через Форму добавления нового элемента<br>\n   * Принимает аргументом объект item\n   * @public\n   * @param {Object} item  - объект с параметрами элемента\n   * @param {String} item.name - название элемента из инпута Формы добавления нового элемента\n   * @param {String} item.link - ссылка на изображение элемента из инпута Формы добавления нового элемента\n   * @returns {Promise} - возвращает промис, содержащий данные нового элемента, полученные от сервера\n   * @since v.1.0.0\n   * @example\n   * api.addNewCard({name: <название элемента>, link: <ссылка на изображение элемента>})\n   */\n  addNewCard(item) {\n    return fetch(this._cardsURL, {\n      method: \"POST\",\n      headers: {\n        authorization: this._token,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: item.name,\n        link: item.link,\n      }),\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  /**\n   * @description Публичный метод<br>\n   * Удаляет элемент с сервера<br>\n   * Принимает аргументом id удаляемого элемента\n   * @public\n   * @param {String} cardId  - id удаляемого элемента\n   * @returns {Promise} - возвращает промис с сообщением об успешном удалении элемента\n   * @since v.1.0.0\n   */\n  deleteCard(cardId) {\n    return fetch(`${this._cardsURL}${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._token,\n      },\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  /**\n   * @description Публичный метод<br>\n   * Редактирует данные в профиле пользователя на сервере<br>\n   * Принимает арументом объект с новыми данными пользователя, веденными через Форму редактирования профиля\n   * @public\n   * @param {Object} Object  - { name, about } - объект с новыми данными пользователя\n   * @param {String} Object.name - новое имя пользователя, введенное в Форму редактирования профиля\n   * @param {String} Object.about - новое описание пользователя, введенное в Форму редактирования профиля\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\n   * @since v.1.0.0\n   * @example\n   * api.editProfile({\n   *   name: <новое имя пользователя, введенное в инпут Формы редактирования профиля>,\n   *   job: <новое описание пользователя, введенное в инпут Формы редактирования профиля >\n   * });\n   */\n  editProfile({ name, about }) {\n    return fetch(`${this._userURL}`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._token,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name,\n        about,\n      }),\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  /**\n   * @description Публичный метод<br>\n   * Изменяет статус кнопки \"лайк\" у карточки<br>\n   * Принимает аргументом id карточки, у которой произошло нажатие \"лайка\" и новое состояние \"лайка\"\n   * @public\n   * @param {String} id - id элемента, на котором произошло нажатие \"лайка\"\n   * @param {Boolean} likeStatus - новое состояние \"лайка\": если true - \"лайк\" поставлен, если false - \"лайк\" снят\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\n   * @public\n   * @since v2.0.2\n   */\n  changeLikeCardStatus(id, likeStatus) {\n    return fetch(`${this._likesURL}${id}`, {\n      method: `${likeStatus ? \"PUT\" : \"DELETE\"}`,\n      headers: {\n        authorization: this._token,\n      },\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  /**\n   * @description Публичный метод<br>\n   * Сохраняет на сервер новую ссылку на аватар пользователя<br>\n   * Принимает аргументом ссылку на новый аватар пользователя, полученную из Формы редактирования аватара\n   * @public\n   * @param {String} avatar - новая ссылка на аватар пользователя, полученная из Формы редактирования аватара\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\n   * @since v.1.0.0\n   */\n  editAvatar(avatar) {\n    return fetch(`${this._avatarURL}`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._token,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        avatar: avatar,\n      }),\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n}\n\n/**\n * @constant api\n * @description Экземпляр класса Api<br>\n * Экспортируется в компонент App\n * @memberof Api\n * @instance\n * @since v.2.0.0\n */\nconst api = new Api({\n  URLs: {\n    baseURL: \"https://mesto.nomoreparties.co/v1/cohort-14/\",\n    cardsURL: \"https://mesto.nomoreparties.co/v1/cohort-14/cards/\",\n    userURL: \"https://mesto.nomoreparties.co/v1/cohort-14/users/me/\",\n    likesURL: \"https://mesto.nomoreparties.co/v1/cohort-14/cards/likes/\",\n    avatarURL: \"https://mesto.nomoreparties.co/v1/cohort-14/users/me/avatar/\",\n  },\n  headers: {\n    authorization: \"85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546\",\n  },\n  token: \"85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546\",\n});\n\nexport default api;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/**\n * @module PopupWithForm\n * @description Функциональный React-компонент<br>\n * Шаблонный компонент попапа<br>\n * По принятым параметрам props и JSX-фрагменту разметки с инпутами props.children создает попап с формой для каждой\n * конкретной задачи: редактирование профиля, редактирование аватара, добавление карточки, подтверждение удаления карточки<br>\n * Принимает объект параметров - props<br>\n * Возвращает JSX-фрагмент разметки - попап<br>\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\n * @param {JSX} props.children - JSX-фрагмент, список инпутов попапа<br><b>Не обязательный пропс.</b>\n * <b>ПРИМЕЧАНИЕ:</b> Может не указываться явно в пропсах, может быть указан JSX-фрагментом при декларировании отрисовки компонента\n * @param {String} props.name - название формы, вставляется в атрибут name тега form и в css-класс, уточняющий тип формы\n * @param {String} props.title - название попапа\n * @param {String} props.submitButtonText - текст, который будет отображаться на кнопке submit.\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Создать\"</b>\n * @param {String} props.preloaderText - текст, отображаемый на кнопке сабмит во время загрузки, т.е. когда isLoading: true\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Сохранение...\"</b>\n * @param {Funcion} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею попапа, закрывает попап\n * @param {Function} props.onSubmit - функция-коллбэк, вызывается при сабмите формы попапа\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true: попап отображается<br>\n *  - false: попап не отображается\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новых данных на сервер:<br>\n *  - true - идет загрузка<br> -  false - нет загрузки. <b>Не обязательный пропс</b>\n * @param {Boolean} props.isReadyToSubmit - индикатор готовности формы к сабмиту, вычисляется по результатам валидации инпутов:<br>\n * true - форма готова к сабмиту, все поля валидны<br>\n * false - форма не готова к сабмиту, хотя бы одно из полей не валидно<br>\n * <b>ПРИМЕЧАНИЕ: </b>в попапе подтверждения удаления DeleteConfirmPopup нет формы, поэтому этот параметр принимается от DeleteConfirmPopup\n * в значении true по умолчанию <br>Since: v.2.0.5\n * @returns {JSX} - JSX-фрагмент разметки, попап\n * @since v.2.0.0\n */\nfunction PopupWithForm({\n  onOverlayClick,\n  onSubmit,\n  onClose,\n  isDisabled,\n  isOpen,\n  isLoading,\n  submitButtonText,\n  preloaderText,\n  name,\n  title,\n  children,\n}) {\n  const popupClassName = classNames(\n    \"popup\",\n    \"page__overlay\",\n    \"page__overlay_theme_light\",\n    `popup_type_${name}`,\n    { popup_opened: isOpen }\n  );\n\n  const popupCloseButtonClassName = classNames(\n    \"button\",\n    \"button_type_close\",\n    \"popup__close-button\",\n    \"popup__close-button_type_modal\"\n  );\n\n  const popupFormClassName = classNames(\n    \"form\",\n    \"popup__form\",\n    `form_type_${name}`\n  );\n\n  const popupFormSubmitButtonClassName = classNames(\n    \"button\",\n    \"form__submit-button\",\n    {\n      \"button_type_submit-inactive\": isDisabled,\n      button_type_submit: !isDisabled,\n    }\n  );\n\n  return (\n    <div onClick={onOverlayClick} className={popupClassName} id={name}>\n      <div className=\"popup__container\">\n        <button\n          type=\"button\"\n          onClick={onClose}\n          className={popupCloseButtonClassName}\n          name=\"close-popup\"\n          value=\"Закрыть\"\n        ></button>\n        <form\n          onSubmit={onSubmit}\n          className={popupFormClassName}\n          name={`${name}-form`}\n          id={`${name}-form`}\n        >\n          <h2 className=\"form__title\">{title}</h2>\n          {children}\n          <button\n            type=\"submit\"\n            disabled={isDisabled}\n            className={popupFormSubmitButtonClassName}\n            name={`${name}-button`}\n            value={submitButtonText}\n          >\n            {isLoading ? preloaderText : submitButtonText}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nPopupWithForm.propTypes = {\n  onOverlayClick: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  isDisabled: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool,\n  submitButtonText: PropTypes.string,\n  preloaderText: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nPopupWithForm.defaultProps = {\n  submitButtonText: \"Создать\",\n  preloaderText: \"Сохранение\",\n};\n\nexport default PopupWithForm;\n","import { useCallback, useState } from \"react\";\n\n/**\n * @module useFormWithValidation\n * @description Пользовательский хук.<br>\n * Запускает валидацию формы, с которой используется. Для запуска валидации, хук\n *  импортируется в компонент с формой и запускается. Хук выполняет валидацию и вывод ошибок\n *  используя браузерную валидацию, т.е. свойство validity объекта ValidityState. Возвращает объект\n *  со стейтами и методами.\n * @returns {Object}  { values, errors, isValid, handleInputChange, setValues, resetForm }\n * @since v.2.0.6\n * @public\n */\nexport function useFormWithValidation() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n\n  /**\n   * @method\n   * @name handleInputChange\n   * @argument {Event} event - событие\n   * @description Обработчик изменения полей инпутов.<br> При каждом вводе в поле инпута введенное значение\n   *  и результаты валидации введенных значений и формы в целом сохраняются в соответствующие стейты.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setValues({ ...values, [name]: value });\n    setErrors({ ...errors, [name]: event.target.validationMessage });\n    setIsValid(event.target.closest(\"form\").checkValidity());\n  };\n\n  /**\n   * @method\n   * @name resetForm\n   * @description Сброс формы после ввода значений<br> Если после ввода значений в форму новые значения не были\n   * отправлены, форма приводится в изначальное актуальное состояние установкой стейтов в необходимые состояния.\n   *  Состояния стейтов передаются аргументами коллбэку метода resetForm.\n   * @public\n   * @since v.2.0.6\n   */\n  const resetForm = useCallback(\n    /**\n     * @function resetForm_callback\n     * @param {Object} newValues - новое значение стейта values\n     * @param {Object} newErrors - новое значение стейта errors\n     * @param {Boolean} newIsValid - новое значение стейта isValid\n     * @description Коллбэк метода resetForm.<br> Устанавливает стейты в состояния согласно принятым аргументам.\n     * @since v.2.0.6\n     */\n    (newValues = {}, newErrors = {}, newIsValid = false) => {\n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return { values, errors, isValid, handleInputChange, setValues, resetForm };\n}\n","import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport { useFormWithValidation } from \"../hooks/useFormWithValidation\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @module EditProfilePopup\n * @description Функциональный React-компонент<br>\n * Редактирует данные профиля пользователя<br>\n * Для успешного изменения профиля пользователь должен ввести валидные данные в поля \"Имя\" и \"О себе\"<br>\n * Принимает объект параметров props<br>\n * Возвращает JSX-фрагмент разметки попапа редактирования профиля пользователя<br>\n * @param {Object} props - объект с параметрами\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\n * @param {Function} props.onUpdateUser -  функция-коллбэк, обновляет данные профиля пользователя\n * при успешном сабмите формы редактирования профиля\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новых данных профиля пользователя,\n * управляет отображением прелоадера загрузки:<br>\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст;<br> <b>Не обязательный пропс</b>\n * @returns {JSX} - JSX-фрагмент разметки, попап редактирования профиля пользователя\n * @see {@link PopupWithForm}\n * @since v.2.0.2\n */\nfunction EditProfilePopup({\n  isOpen,\n  isLoading,\n  onClose,\n  onOverlayClick,\n  onUpdateUser,\n}) {\n  const {\n    values,\n    errors,\n    isValid,\n    handleInputChange,\n    resetForm,\n  } = useFormWithValidation();\n\n  const currentUser = React.useContext(CurrentUserContext);\n\n  const { name, description } = values;\n\n  /**\n   * @method handleSubmit\n   * @argument {Event} evt - событие\n   * @description Обработчик сабмита формы добавления новой карточки<br>\n   * Вызывает метод onUpdateUser, полученный из props.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    onUpdateUser({\n      name,\n      about: description,\n    });\n  };\n\n  React.useEffect(() => {\n    resetForm(\n      {\n        name: currentUser.name,\n        description: currentUser.about,\n      },\n      {},\n      true\n    );\n    // eslint-disable-next-line\n  }, [isOpen]);\n\n  return (\n    <PopupWithForm\n      name=\"edit-profile\"\n      title=\"Редактировать профиль\"\n      submitButtonText=\"Сохранить\"\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlayClick={onOverlayClick}\n      onSubmit={handleSubmit}\n      isLoading={isLoading}\n      isDisabled={!isValid}\n    >\n      <>\n        <ul className=\"form__inputs\">\n          <li className=\"form__field\">\n            <input\n              id=\"user-name-input\"\n              name=\"name\"\n              type=\"text\"\n              onChange={handleInputChange}\n              value={name || \"\"}\n              className=\"form__input form__input_type_name\"\n              placeholder=\"Имя\"\n              required\n              minLength=\"1\"\n              maxLength=\"30\"\n            />\n            <span className=\"form__input-error\" id=\"edit-profile-input-error\">\n              {errors.name || \"\"}\n            </span>\n          </li>\n          <li className=\"form__field\">\n            <input\n              id=\"user-job-input\"\n              name=\"description\"\n              type=\"text\"\n              onChange={handleInputChange}\n              value={description || \"\"}\n              className=\"form__input form__input_type_job\"\n              placeholder=\"О себе\"\n              required\n              minLength=\"3\"\n              maxLength=\"35\"\n            />\n            <span className=\"form__input-error\" id=\"edit-profile-input-error\">\n              {errors.description || \"\"}\n            </span>\n          </li>\n        </ul>\n      </>\n    </PopupWithForm>\n  );\n}\n\nEditProfilePopup.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onOverlayClick: PropTypes.func.isRequired,\n  onUpdateUser: PropTypes.func.isRequired,\n};\n\nexport default EditProfilePopup;\n","import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport { useFormWithValidation } from \"../hooks/useFormWithValidation\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @module EditAvatarPopup\n * @description Функциональный React-компонент<br>\n * Изменяет аватар пользователя.<br>\n * Для успешного изменения аватара пользователь должен ввести корректную ссылку (url-адрес) на новый аватар <br>\n * Принимает объект параметров props<br>\n * Возвращает JSX-фрагмент разметки попапа редактирования аватара пользователя<br>\n * @param {Object} props - объект с параметрами\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\n * @param {Function} props.onUpdateAvatar -  функция-коллбэк, обновляет аватар пользователя при успешном сабмите формы изменения аватара\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @param {Boolean} props.isLoading - индикатор состояния загрузки нового аватара пользователя,\n * управляет отображением прелоадера загрузки:<br>\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст;<br> <b>Не обязательный пропс</b>\n * @returns {JSX} - JSX-фрагмент разметки, попап редактирования аватара пользователя\n * @see {@link PopupWithForm}\n * @since v.2.0.2\n */\nfunction EditAvatarPopup({\n  isOpen,\n  isLoading,\n  onClose,\n  onOverlayClick,\n  onUpdateAvatar,\n}) {\n  const {\n    values,\n    errors,\n    isValid,\n    handleInputChange,\n    resetForm,\n  } = useFormWithValidation();\n\n  const { avatar } = values;\n\n  /**\n   * @method handleSubmit\n   * @argument {Event} evt - событие\n   * @description Обработчик сабмита формы добавления новой карточки<br>\n   * Вызывает метод onUpdateAvatar, полученный из props.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    onUpdateAvatar({ avatar });\n  };\n\n  React.useEffect(() => {\n    resetForm({}, {}, false);\n    // eslint-disable-next-line\n  }, [isOpen]);\n\n  return (\n    <PopupWithForm\n      name=\"edit-avatar\"\n      title=\"Обновить аватар\"\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlayClick={onOverlayClick}\n      onSubmit={handleSubmit}\n      isLoading={isLoading}\n      isDisabled={!isValid}\n      children={\n        <ul className=\"form__inputs\">\n          <li className=\"form__field\">\n            <input\n              id=\"avatar-link-input\"\n              name=\"avatar\"\n              type=\"url\"\n              onChange={handleInputChange}\n              value={avatar || \"\"}\n              className=\"form__input form__input_type_avatar-link\"\n              placeholder=\"Ссылка на картинку\"\n              required\n            />\n            <span className=\"form__input-error\" id=\"avatar-link-input-error\">\n              {errors.avatar}\n            </span>\n          </li>\n        </ul>\n      }\n    />\n  );\n}\n\nEditAvatarPopup.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onOverlayClick: PropTypes.func.isRequired,\n  onUpdateAvatar: PropTypes.func.isRequired,\n};\n\nexport default EditAvatarPopup;\n","import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport { useFormWithValidation } from \"../hooks/useFormWithValidation\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @module AddPlacePopup\n * @description Функциональный React-компонент<br>\n * Добавляет карточку в приложение<br>\n * Для успешного добавления карточки пользователь должен ввести корректные данные:\n *  название карточки (изображения) и ссылку (url-адрес) на изображение<br>\n * Принимает объект параметров props<br>\n * Возвращает JSX-фрагмент разметки попапа добавления карточки<br>\n * @param {Object} props - объект параметров\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею,\n *  закрывает попап\n * @param {Function} props.onSubmit - функция-коллбэк, добавляет карточки в приложение при\n *  успешном сабмите формы добавления карточки\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новой карточки,\n *  управляет отображением прелоадера загрузки:<br>\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст<br> <b>Не обязательный пропс</b>\n * @public\n * @see {@link PopupWithForm}\n * @since v.2.0.2\n */\nfunction AddPlacePopup({\n  isOpen,\n  isLoading,\n  onClose,\n  onOverlayClick,\n  onSubmit,\n}) {\n  const {\n    values,\n    errors,\n    isValid,\n    handleInputChange,\n    resetForm,\n  } = useFormWithValidation();\n\n  const { title, link } = values;\n\n  /**\n   * @method handleSubmit\n   * @argument {Event} evt - событие\n   * @description Обработчик сабмита формы добавления новой карточки<br>\n   * Вызывает метод onSubmit, полученный из props.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    onSubmit({ name: title, link });\n  };\n\n  React.useEffect(() => {\n    resetForm({}, {}, false);\n    // eslint-disable-next-line\n  }, [isOpen]);\n\n  return (\n    <PopupWithForm\n      name=\"add-photo\"\n      title=\"Новое место\"\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlayClick={onOverlayClick}\n      onSubmit={handleSubmit}\n      isLoading={isLoading}\n      isDisabled={!isValid}\n    >\n      <ul className=\"form__inputs\">\n        <li className=\"form__field\">\n          <input\n            id=\"place-title-input\"\n            name=\"title\"\n            type=\"text\"\n            onChange={handleInputChange}\n            value={title || \"\"}\n            className=\"form__input form__input_type_place-title\"\n            placeholder=\"Название\"\n            required\n            minLength=\"3\"\n            maxLength=\"30\"\n          />\n          <span className=\"form__input-error\">{errors.title}</span>\n        </li>\n        <li className=\"form__field\">\n          <input\n            id=\"image-link-input\"\n            name=\"link\"\n            type=\"url\"\n            onChange={handleInputChange}\n            value={link || \"\"}\n            className=\"form__input form__input_type_image-link\"\n            placeholder=\"Ссылка на картинку\"\n            required\n          />\n          <span className=\"form__input-error\">{errors.link}</span>\n        </li>\n      </ul>\n    </PopupWithForm>\n  );\n}\n\nAddPlacePopup.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onOverlayClick: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default AddPlacePopup;\n","import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport PropTypes from 'prop-types';\n/**\n * @module DeleteConfirmPopup\n * @description Функциональный React-компонент<br>\n * Запрашивает подтверждение удаления карточки<br>\n * Принимает объект параметров props<br>\n * Возвращает JSX-фрагмент разметки попапа  подтверждения удаления карточки\n * @param {Object} props - объект параметров\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\n * @param {Function} props.onSubmit - функция-коллбэк сабмита попапа, удаляет карточку\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @param {Boolean} props.isProcessing - индикатор статуса процесса удаления карточки:\n * true - карточка удаляется, false - ожидается подтверждение удаления карточки или отмена<br>\n * <b>Не обязательный пропс</b>\n * @see {@link PopupWithForm}\n * @since v.2.0.4\n */\nfunction DeleteConfirmPopup({\n  onClose,\n  onOverlayClick,\n  isOpen,\n  onSubmit,\n  isProcessing,\n}) {\n  return (\n    <PopupWithForm\n      name=\"confirm\"\n      title=\"Вы уверены?\"\n      submitButtonText=\"Да\"\n      onClose={onClose}\n      onOverlayClick={onOverlayClick}\n      isOpen={isOpen}\n      onSubmit={onSubmit}\n      isLoading={isProcessing}\n      preloaderText=\"Удаление...\"\n      isDisabled={false}\n    />\n  );\n}\n\nDeleteConfirmPopup.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  onOverlayClick: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  isProcessing: PropTypes.bool,\n};\n\nexport default DeleteConfirmPopup;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/**\n * @module InfoToolTip\n * @description Функциональный React-компонент<br>\n * Попап с информационной подсказкой об успехе или ошибке регистрации в приложении<br>\n * Открывается при попытках пользователя зарегистрироваться или войти в приложение.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {String} props.name - название попапа. <b>Не обязательный пропс.\n *  Значение по умолчанию: \"info-tool-tip\"</b>\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\n *  - true - попап открыт<br>\n *  - false - попап закрыт\n * @param {Function} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\n * @param {String} props.titleTextSuccess - текст подсказки об успешной регистрации.\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Вы успешно зарегистрировались!\"</b>\n * @param {String} props.titleTextFail - текст подсказки об ошибке регистрации или авторизации.\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Что-то пошло не так! Попробуйте ещё раз.\"</b>\n * @param {Boolean} props.loggedIn - индикатор состояния пользователя, управляет его допуском в приложение:<br>\n *  - true - пользователь зарегистрирован и залогинился<br>\n *  - false - не зарегистрирован, не залогинился или вышел из приложения\n * @returns {JSX} - JSX-фрагмент разметки, попап с информационной подсказкой\n * @since v.2.1.0\n */\nfunction InfoToolTip({\n  name,\n  isOpen,\n  onClose,\n  onOverlayClick,\n  titleTextSuccess,\n  titleTextFail,\n  loggedIn,\n}) {\n  const popupClassName = classNames(\n    \"popup\",\n    \"page__overlay\",\n    \"page__overlay_theme_light\",\n    `popup_type_${name}`,\n    isOpen && \"popup_opened\"\n  );\n\n  const popupCloseButtonClassName = classNames(\n    \"button\",\n    \"button_type_close\",\n    \"popup__close-button\",\n    \"popup__close-button_type_info-tool-tip\"\n  );\n\n  const popupImageClassName = classNames(\"info-tool-tip__image\", {\n    \"info-tool-tip__image_type_success\": loggedIn,\n    \"info-tool-tip__image_type_fail\": !loggedIn,\n  });\n\n  return (\n    <div onClick={onOverlayClick} className={popupClassName} id={name}>\n      <div className=\"popup__container\">\n        <button\n          type=\"button\"\n          onClick={onClose}\n          className={popupCloseButtonClassName}\n          name=\"close-popup\"\n          value=\"Закрыть\"\n        ></button>\n        <div className=\"info-tool-tip popup__info-tool-tip\">\n          <div\n            className={popupImageClassName}\n          ></div>\n          <p className=\"info-tool-tip__title\">\n            {loggedIn ? titleTextSuccess : titleTextFail}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nInfoToolTip.proTypes = {\n  name: PropTypes.string,\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onOverlayClick: PropTypes.func.isRequired,\n  titleTextSuccess: PropTypes.string,\n  titleTextFail: PropTypes.string,\n  loggedIn: PropTypes.bool.isRequired,\n};\n\nInfoToolTip.defaultProps = {\n  name: \"info-tool-tip\",\n  titleTextSuccess: \"Вы успешно зарегистрировались!\",\n  titleTextFail: \"Что-то пошло не так! Попробуйте ещё раз.\",\n};\n\nexport default InfoToolTip;\n","import React from \"react\";\nimport { Route, Link, Switch } from \"react-router-dom\";\nimport { SIGNIN, SIGNUP } from \"../utils/routesMap\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/**\n * @module StartPageWithForm\n * @description Функциональный React-компонент<br>\n * Стартовая страница. Пропсами определяется тип страницы: страница авторизации или регистрации.\n *  Поля формы одинаковы для обоих типов страницы и также передаются в пропсах JSX-фрагментом.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {String} props.name - название, которое будет присвоено форме компонента.\n * @param {String} props.title - заголовок формы\n * @param {Function} props.onSubmit -функция-коллбэк, вызывается при сабмите формы.\n * @param {Boolean} props.isLoading - индикатор состояния загрузки, используется для информирования пользовтаеля\n *  о том, что инициированный им процесс выполняется\n * @param {String} props.submitButtonText - текст, который будет отображаться на кнопке submit.\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Отправить\"</b>\n * @param {String} props.preloaderText - текст, отображаемый на кнопке сабмит во время загрузки, т.е. когда isLoading: true\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Выполняется...\"</b>\n * @param {String} props.redirectTitleText - текст, перед перенаправляющей ссылкой (не текст ссылки)\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Уже зарегистрированы? \"</b>\n * @param {String} props.redirectLinkText - текст непосредственно перенаправляющей ссылки\n *  <b>Не обязательный пропс. Значение по умолчанию: \"Войти\"</b>\n * @param {JSX} props.children - JSX - фрагмент\n * @returns {JSX} - JSX - фрагмент, страница регистрации или авторизации\n * @since v.2.1.0\n */\nfunction StartPageWithForm({\n  name,\n  title,\n  onSubmit,\n  isDisabled,\n  isLoading,\n  submitButtonText,\n  preloaderText,\n  redirectTitleText,\n  redirectLinkText,\n  children,\n}) {\n  const formClassName = classNames(\n    \"form\",\n    \"start-page-container__form\",\n    `form_type_${name}`\n  );\n\n  const submitButtonClassName = classNames(\n    \"button\",\n    \"form__submit-button\",\n    \"form__submit-button_type_start\",\n    {\n      \"button_type_submit-inactive\": isDisabled,\n      \"button_type_submit-start\": !isDisabled,\n    }\n  );\n\n  return (\n    <div className=\"start-page-container page__start-page-container\">\n      <form\n        onSubmit={onSubmit}\n        className={formClassName}\n        name={`${name}-form`}\n        id={`${name}-form`}\n      >\n        <h2 className=\"form__title form__title_type_start\">{title}</h2>\n        {children}\n        <button\n          type=\"submit\"\n          disabled={isDisabled}\n          className={submitButtonClassName}\n          name={`${name}-button`}\n          value={submitButtonText}\n        >\n          {isLoading ? preloaderText : submitButtonText}\n        </button>\n        <Switch>\n          <Route path={SIGNUP}>\n            <p className=\"form__redirect-title\">\n              {redirectTitleText}\n              <Link to={SIGNIN} className=\"form__redirect-link\">\n                {redirectLinkText}\n              </Link>\n            </p>\n          </Route>\n          <Route path={SIGNIN}>\n            <p className=\"form__redirect-title hidden-block\">\n              {redirectTitleText}\n              <Link to=\"#\" className=\"form__redirect-link hidden-block\">\n                {redirectLinkText}\n              </Link>\n            </p>\n          </Route>\n        </Switch>\n      </form>\n    </div>\n  );\n}\n\nStartPageWithForm.propTypes = {\n  name: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  isDisabled: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool,\n  submitButtonText: PropTypes.string,\n  preloaderText: PropTypes.string,\n  redirectTitleText: PropTypes.string,\n  redirectLinkText: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nStartPageWithForm.defaultProps = {\n  submitButtonText: \"Отправить\",\n  preloaderText: \"Выполняется...\",\n  redirectTitleText: \"Уже зарегистрированы? \",\n  redirectLinkText: \"Войти\",\n};\n\nexport default StartPageWithForm;\n","import React, { useEffect } from \"react\";\nimport { useFormWithValidation } from \"../hooks/useFormWithValidation\";\nimport StartPageWithForm from \"./StartPageWithForm\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @module Login\n * @description Функциональный React-компонент<br>\n * Форма входа (авторизации) на стартовой странице приложения. После выхода из\n *  приложения пользователь имеет возможность сразу повторно войти в приложение не вводя\n *  свои учетные данные, т.к. они сохранены и вставлены в поля форму. Однако, если пользователь\n *  обновит страницу или закроет ее - данные сотрутся, форма очистится, потребуется повторная авторизация.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {Boolean} props.isLoading - индикатор состояния загрузки, используется для информирования пользовтаеля\n *  о том, что инициированный им процесс выполняется. <b>Не обязательный пропс</b>\n * @param {Function} props.handleLogin - функция-коллбэк, вызывается при сабмите формы входа, отправляет данные\n *  пользователя на сервер для проверки его регистрации и получения токена.\n * @param {Object} props.userData - объект с данными пользователя. Принимаются для подстановки в форму входа,\n * если пользователь выходит из приложения.\n * @param {String} props.userData.login - емэйл (логин), введенный пользователем при входе\n * @param {String} props.userData.password - пароль, введенный пользователем при входе\n * @returns {JSX} - JSX-фрагмент разметки, форма авторизации в приложении\n * @since v.2.1.0\n */\nfunction Login({ isLoading, handleLogin, userData }) {\n  const {\n    values,\n    errors,\n    isValid,\n    handleInputChange,\n    resetForm,\n  } = useFormWithValidation();\n\n  const { login, password } = values;\n\n  /**\n   * @method handleSubmit\n   * @argument {Event} evt - событие\n   * @description Обработчик сабмита формы входа<br>\n   * Вызывает метод handleLogin, полученный из props.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const userData = { password, login };\n    handleLogin(userData);\n  };\n\n  /**\n   * При первом выходе из приложения пользовательские данные подставляются в форму, пользователь может\n   *  сразу войти обратно. После обновления страницы данные сотрутся.\n   * @ignore\n   */\n  useEffect(() => {\n    resetForm(\n      {\n        login: userData.email,\n        password: userData.password,\n      },\n      {}\n    );\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <StartPageWithForm\n      name=\"login\"\n      title=\"Вход\"\n      onSubmit={handleSubmit}\n      isDisabled={!isValid}\n      isLoading={isLoading}\n      submitButtonText=\"Войти\"\n      preloaderText=\"Выполняется вход...\"\n    >\n      <>\n        <ul className=\"form__inputs form__inputs_type_start\">\n          <li className=\"form__field form__field_type_start\">\n            <input\n              id=\"user-login\"\n              name=\"login\"\n              type=\"email\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={login || \"\"}\n              className=\"form__input form__input_type_start form__input_type_user-login\"\n              placeholder=\"Email\"\n              required\n            />\n            <span className=\"form__input-error\" id=\"user-login-input-error\">\n              {errors.login || \"\"}\n            </span>\n          </li>\n          <li className=\"form__field\">\n            <input\n              id=\"user-password\"\n              name=\"password\"\n              type=\"password\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={password || \"\"}\n              className=\"form__input form__input_type_start form__input_type_user-password\"\n              placeholder=\"Пароль\"\n              required\n              minLength=\"3\"\n              maxLength=\"35\"\n            />\n            <span className=\"form__input-error\" id=\"user-password-input-error\">\n              {errors.password || \"\"}\n            </span>\n          </li>\n        </ul>\n      </>\n    </StartPageWithForm>\n  );\n}\n\nLogin.propTypes = {\n  isLoading: PropTypes.bool,\n  handleLogin: PropTypes.func.isRequired,\n  userData: PropTypes.object.isRequired,\n};\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport { useFormWithValidation } from \"../hooks/useFormWithValidation\";\nimport StartPageWithForm from \"./StartPageWithForm\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @module Register\n * @description Функциональный React-компонент<br>\n * Форма регистрации в приложении. Отправляет запрос на регистрацию пользователя.\n * @param {Object} props - пропсы, принимаемые компонентом\n * @param {Boolean} props.isLoading - индикатор состояния загрузки, используется для информирования пользовтаеля\n *  о том, что инициированный им процесс выполняется. <b>Не обязательный пропс</b>\n * @param {Function} props.handleRegister - функция-коллбэк, вызывается при сабмите формы регистрации, отправляет данные\n *  пользователя на сервер для его регистрации.\n * @returns {JSX} - JSX-фрагмент разметки, форма регистрации в приложении\n * @since v.2.1.0\n */\nfunction Register({ isLoading, handleRegister }) {\n  const {\n    values,\n    errors,\n    isValid,\n    handleInputChange,\n    resetForm,\n  } = useFormWithValidation();\n\n  const { regEmail, regPassword } = values;\n\n  /**\n   * @method handleSubmit\n   * @argument {Event} evt - событие\n   * @description Обработчик сабмита формы регистрации<br>\n   * Вызывает метод handleRegister, полученный из props.\n   * @public\n   * @since v.2.0.6\n   */\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const userRegistrationData = {\n      email: regEmail,\n      password: regPassword,\n    };\n    handleRegister(userRegistrationData);\n  };\n\n  useEffect(() => {\n    resetForm({}, {}, false);\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <StartPageWithForm\n      name=\"register\"\n      title=\"Регистрация\"\n      onSubmit={handleSubmit}\n      isDisabled={!isValid}\n      isLoading={isLoading}\n      submitButtonText=\"Зарегистрироваться\"\n      preloaderText=\"Регистрация...\"\n    >\n      <>\n        <ul className=\"form__inputs form__inputs_type_start\">\n          <li className=\"form__field form__field_type_start\">\n            <input\n              id=\"reg-email\"\n              name=\"regEmail\"\n              type=\"email\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={regEmail || \"\"}\n              className=\"form__input form__input_type_start form__input_type_reg-email\"\n              placeholder=\"Email\"\n              required\n            />\n            <span className=\"form__input-error\" id=\"user-email-input-error\">\n              {errors.regEmail || \"\"}\n            </span>\n          </li>\n          <li className=\"form__field\">\n            <input\n              id=\"reg-password\"\n              name=\"regPassword\"\n              type=\"password\"\n              onChange={handleInputChange}\n              onFocus={handleInputChange}\n              value={regPassword || \"\"}\n              className=\"form__input form__input_type_start form__input_type_reg-password\"\n              placeholder=\"Пароль\"\n              required\n              minLength=\"3\"\n              maxLength=\"35\"\n            />\n            <span className=\"form__input-error\" id=\"reg-password-input-error\">\n              {errors.regPassword || \"\"}\n            </span>\n          </li>\n        </ul>\n      </>\n    </StartPageWithForm>\n  );\n}\n\nRegister.propTypes = {\n  isLoading: PropTypes.bool,\n  handleRegister: PropTypes.func.isRequired,\n};\n\nexport default Register;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { SIGNIN } from \"../utils/routesMap\";\n\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n  return (\n    <Route>\n      {() =>\n        props.loggedIn ? <Component {...props} /> : <Redirect to={SIGNIN} />\n      }\n    </Route>\n  );\n};\n\nexport default ProtectedRoute;\n","export const TOKEN_KEY = \"token\";\n\n/**\n * @module token\n * @description Компонент, содержащий методы работы с токеном.\n * @since v.2.1.0\n */\n\n/**\n * @method setToken\n * @description Метод сохранения токена в локальное хранилище браузера\n * @param {String} token - токен\n * @since v.2.1.0\n */\nexport const setToken = (token) => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\n\n/**\n * @method getToken\n * @description Метод получения токена из локального хранилища браузера\n * @since v.2.1.0\n */\nexport const getToken = () => localStorage.getItem(TOKEN_KEY);\n\n/**\n * @method removeToken\n * @description Метод удаления токена из локального хранилища браузера\n * @since v.2.1.0\n */\nexport const removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n","import * as PATH_TO_ from \"./endpoints\";\n\nconst BASE_URL = \"https://auth.nomoreparties.co\";\n\n/**\n * @module auth\n * @description Компонент, содержащий методы отправки запросов на регистрацию, авторизацию,\n *  проверку токена.\n * @returns {Promise}\n * @since v.2.1.0\n */\n\n/**\n * @method register\n * @description Отправляет запрос на регистрацию пользователя. Принимает аргументами данные\n *  пользователя, возвращает промис с данными, зарегистрированными на сервере.\n * @param {String} password - емэйл (логин), введенный пользователем при регистрации\n * @param {String} email -  пароль, введенный пользователем при регистрации\n * @returns {Promise}\n * @since v.2.1.0\n */\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}${PATH_TO_.REGISTER}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ password, email }),\n  })\n    .then((res) => res.json())\n    .catch((err) => console.log(err));\n};\n\n/**\n * @method authorize\n * @description Отправляет запрос на авторизацию пользователя. Принимает аргументами данные\n *  пользователя, возвращает промис с токеном пользователя.\n * @param {String} password - емэйл (логин), введенный пользователем при авторизации\n * @param {String} email -  пароль, введенный пользователем при авторизации\n * @returns {Promise}\n * @since v.2.1.0\n */\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}${PATH_TO_.LOGIN}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ password, email }),\n  })\n    .then((res) => res.json())\n    .catch((err) => console.log(err));\n};\n\n/**\n * @method getContent\n * @description Отправляет запрос на проверку токена пользователя. Принимает аргументом токен,\n *  если токен действующий - возвращает промис с данными пользователя.\n * @param {String} token - токен пользователя, хранящийся в локальном хранилище браузера\n * @returns {Promise}\n * @since v.2.1.0\n */\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}${PATH_TO_.USER}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((res) => res.json())\n    .catch((err) => console.log(err));\n};\n","import React from \"react\";\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from \"./ImagePopup\";\nimport api from \"../utils/api\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport DeleteConfirmPopup from \"./DeleteConfirmPopup\";\nimport InfoToolTip from \"./InfoToolTip\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport * as TO_ from \"../utils/routesMap\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport { getToken, setToken, TOKEN_KEY } from \"../utils/token\";\nimport * as auth from \"../utils/auth\";\nimport NavBar from \"./NavBar\";\n\n/**\n * @description Классовый React-компонент<br>\n * Главный компонент приложения<br>\n * Собирает все компоненты приложения и декларирует их отрисовку<br>\n * @returns {JSX} - JSX-разметка приложения\n * @since v.2.0.0\n */\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    /**\n     * @description Объявление стейтов и установка их начальных значений\n     * @param {Object} state - объект со стейтами\n     * @property {Boolean} state.isEditProfilePopupOpen - стейт попапа редактирования профиля,\n     *  управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isAddPlacePopupOpen - стейт попапа добавления карточки,\n     * управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isEditAvatarPopupOpen - стейт попапа редактирования аватара,\n     * управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property{Boolean} state.isDeleteConfirmPopupOpen - стейт попапа подтверждения удаления\n     *  карточки, управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isImagePopupOpen - стейт попапа с полноразмерным изображением,\n     * управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Object | undefined} state.selectedCard - стейт кликнутой карточки,\n     * Начальное значение пустой объект - карточка не определена\n     * @property {Object} state.currentUser - стейт, сохраняет объект с данными о текущем пользователе\n     * @property {Array} state.cards - стейт, содержит массив объектов с данными карточек\n     * @property {Boolean} state.isLoading - стейт состояния процесса, true - процесс выполняется,\n     *  false- процесс не выполняется\n     * @property {Boolean} state.loggedIn - стейт статуса пользователя: залогинен (true)\n     *  или нет (false)\n     * @property {Object} state.userData - стейт, объект с данными пользователя\n     * @property {String} state.userData.email - емэйл пользователя (логин профиля)\n     * @property {String} state.userData.password - пароль, указанный пользователем при входе\n     * @property{String} state.userData.password - пароль профиля пользователя\n     * @property {Boolean} state.isInfoToolTipOpen - стейт попапа подсказки о результате авторизации,\n     *  управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @property {Boolean} state.isMenuOpened - стейт состояния меню на мобильном разрешении,\n     *  управляет изображением кнопки открытия/закрытия меню.\n     * @this App\n     */\n    this.state = {\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isDeleteConfirmPopupOpen: false,\n      isImagePopupOpen: false,\n      selectedCard: {},\n      currentUser: {},\n      cards: [],\n      isLoading: false,\n      loggedIn: false,\n      userData: {\n        email: \"\",\n        password: \"\",\n      },\n      isInfoToolTipOpen: false,\n      isMenuOpened: false,\n    };\n  }\n\n  /**\n   * @method  closeAllPopups\n   * @description Публичный метод<br>\n   * Стрелочная функция, закрывает все попапы, удаляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  closeAllPopups = () => {\n    document.removeEventListener(\"keydown\", this.handleEscClose);\n    this.setState({\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isDeleteConfirmPopupOpen: false,\n      isImagePopupOpen: false,\n      selectedCard: {},\n      isInfoToolTipOpen: false,\n    });\n  };\n\n  /**\n   * @method handleEscClose\n   * @description Обработчик нажатия на клавишу Escape<br>\n   * Стрелочная функция, закрывает попап при нажатии клавиши Esc\n   * @param {Event} evt - событие\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  handleEscClose = (evt) => {\n    if (evt.key === \"Escape\") {\n      this.closeAllPopups();\n    }\n  };\n\n  /**\n   * @method handleClickOnOverlay\n   * @description Обработчик клика по оверлею<br>\n   * Стрелочная функция, закрывает попап при клике по оверлею\n   * @param {Event} evt - событие\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  handleClickOnOverlay = (evt) => {\n    /**\n     * Проверка истинности условия - клик по оверлею <br>\n     * Примечание: этот метод используется как обработчик в слушателе клика на оверлее попапа<br>\n     * Поэтому в данном случае условие проверяет совпадение клика именно на оверлее попапа\n     * @ignore\n     */\n    if (evt.target === evt.currentTarget) {\n      this.closeAllPopups();\n    }\n  };\n\n  /**\n   * @method handleCardLike\n   * @description Обработчик клика по иконке \"лайк\"<br>\n   * Стрелочная функция, принимает аргументом объект с данными карточки.\n   * Ставит или снимает \"лайки\", в зависимости от состояния \"лайка\".\n   * @param {Object} card - объект с данными лайкнутой карточки\n   * @param {String} card.id - id лайкнутой карточки\n   * @param {Array} card.likes - массив \"лайков\" лайкнутой карточки\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.2\n   * @see {@link Card}\n   */\n  handleCardLike = (card) => {\n    const isLiked = card.likes.some(\n      (likeOwner) => likeOwner._id === this.state.currentUser._id\n    );\n    api\n      .changeLikeCardStatus(card.id, !isLiked)\n      .then((newCard) => {\n        const newCards = this.state.cards.map((cardsItem) =>\n          cardsItem.id === card.id\n            ? {\n                id: newCard._id,\n                link: newCard.link,\n                title: newCard.name,\n                likesQuantity: newCard.likes.length,\n                owner: newCard.owner,\n                likes: newCard.likes,\n              }\n            : cardsItem\n        );\n        this.setState({ cards: newCards });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  /**\n   * @function handleCardClick\n   * @description Обработчик клика по изображению карточки<br>\n   * Стрелочная функция, открывает попап с полноразмерным изображением карточки,\n   * добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Card}\n   */\n  handleCardClick = (card) => {\n    document.addEventListener(\"keydown\", this.handleEscClose);\n    this.setState({ selectedCard: card });\n    this.setState({ isImagePopupOpen: true });\n  };\n\n  /**\n   * @method handleCardDelete\n   * @description Обработчик клика по иконке \"удалить\"<br>\n   * Стрелочная функция, принимает аргументом объект с данными карточки и сохраняет его в стейт.\n   * Открывает попап подтверждения удаления карточки\n   * @param {Object} card - объект с данными удаляемой карточки\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.4\n   * @see {@link Card}\n   */\n  handleCardDelete = (card) => {\n    this.setState({ isDeleteConfirmPopupOpen: true });\n    this.setState({ selectedCard: card });\n  };\n\n  /**\n   * @function handleDeleteConfirm\n   * @description Обработчик подтверждения удаления карточки (сабмит попапа подтверждения удаления)<br>\n   * Стрелочная функция, удаляет карточку.\n   * @param {Event} evt - событие, принимается для отмены стандартного поведения формы при сабмите\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.4\n   * @see {@link Card}\n   * @see {@link DeleteConfirmPopup}\n   */\n  handleDeleteConfirm = (evt) => {\n    evt.preventDefault();\n    const card = this.state.selectedCard;\n    this.setState({ isLoading: true });\n\n    api\n      .deleteCard(card.id)\n      .then(() => {\n        const newCards = this.state.cards.filter((cardsItem) => {\n          return cardsItem.id !== card.id;\n        });\n        this.setState({ cards: newCards });\n        this.closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  };\n\n  /**\n   * @method handleEditAvatarClick\n   * @description Обработчик клика по аватару<br>\n   * Стрелочная функция, открывает попап редактирования аватара, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Main}\n   */\n  handleEditAvatarClick = () => {\n    document.activeElement.blur();\n    document.addEventListener(\"keydown\", this.handleEscClose);\n    this.setState({ isEditAvatarPopupOpen: true });\n  };\n\n  /**\n   * @function handleUpdateAvatar\n   * @description Обработчик сабмита формы редактирования аватара<br>\n   * Изменяет аватар пользователя.<br>\n   * Стрелочная функция, принимает объект с новой ссылкой на аватар пользователя,\n   * возвращает объект с изменнуми данными пользователя\n   * @param {Object} Object - объект с новой ссылкой на аватар пользователя\n   * @param {String} Object.avatar - новая ссылка на аватар пользователя\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.2\n   * @see {@link EditAvatarPopup}\n   */\n  handleUpdateAvatar = ({ avatar }) => {\n    this.setState({ isLoading: true });\n    api\n      .editAvatar(avatar)\n      .then((res) => {\n        this.setState({ currentUser: res });\n        this.closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  };\n\n  /**\n   * @method handleEditProfileClick\n   * @description Обработчик клика по кнопке \"Редактировать профиль\"<br>\n   * Стрелочная функция, открывает попап редактирования профиля, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Main}\n   */\n  handleEditProfileClick = () => {\n    document.activeElement.blur();\n    document.addEventListener(\"keydown\", this.handleEscClose);\n    this.setState({ isEditProfilePopupOpen: true });\n  };\n\n  /**\n   * @function handleUpdateUser\n   * @description Обработчик сабмита формы редактирования профиля<br>\n   * Редактирует профиль пользователя.<br>\n   * Стрелочная функция, принимает объект с новыми данными профиля пользователя,\n   * возвращает объект с измененными данными профиля пользователя\n   * @param {Object} Object - объект с новыми данными профиля пользователя\n   * @param {String} Object.name - новое имя пользователя\n   * @param {String} Object.about - новое описание пользователя\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.2\n   * @see {@link EditProfilePopup}\n   */\n  handleUpdateUser = ({ name, about }) => {\n    this.setState({ isLoading: true });\n\n    api\n      .editProfile({ name, about })\n      .then((res) => {\n        this.setState({ currentUser: res });\n        this.closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  };\n\n  /**\n   * @method handleAddPlaceClick\n   * @description Обработчик клика по кнопке \"Добавить фото\"<br>\n   * Стрелочная функция, открывает попап добавления новой карточки, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   * @see {@link Main}\n   */\n  handleAddPlaceClick = () => {\n    document.activeElement.blur();\n    document.addEventListener(\"keydown\", this.handleEscClose);\n    this.setState({ isAddPlacePopupOpen: true });\n  };\n\n  /**\n   * @method handleAddPlaceSubmit\n   * @description Обработчик сабмита формы добавления новой карточки<br>\n   * Стрелочная функция, принимает аргументом объект с данными для создания карточки,\n   * возвращает карточку, полученную с сервера\n   * @param {Object} Object - объект с данными для создания карточки\n   * @param {String} Object.name - название карточки\n   * @param {String} Object.link - ссылка на изображение карточки\n   * @returns {Object} - объект с данными карточки, полученный от сервера\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.2\n   * @see {@link AddPlacePopup}\n   */\n  handleAddPlaceSubmit = ({ name, link }) => {\n    this.setState({ isLoading: true });\n    api\n      .addNewCard({ name, link })\n      .then((newCard) => {\n        const obtainedCard = {\n          id: newCard._id,\n          link: newCard.link,\n          title: newCard.name,\n          likesQuantity: newCard.likes.length,\n          owner: newCard.owner,\n          likes: newCard.likes,\n        };\n        const resultCardsArr = this.state.cards.concat(obtainedCard);\n        this.setState({ cards: resultCardsArr });\n        this.closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.setState({ isLoading: false });\n      });\n  };\n\n  /**\n   * @method handleRegister\n   * @description Обработчик сабмита в форме регистрации<br>\n   *  Собирает данные, введенные пользователем в форму, отправляет запрос на создание\n   *  учетной записи пользователя, в случае успеха переадресовывает на форму входа в приложение.\n   * @param {Oblect} userData - объект с данными пользователя из формы регистрации\n   * @param {String} userData.email - емэйл (логин), введенный пользователем при регистрации\n   * @param {String} userData.password - пароль, введенный пользователем при регистрации\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link Register}\n   */\n  handleRegister = ({ password, email }) => {\n    this.setState({ isLoading: true });\n    auth\n      .register(password, email)\n      .then((res) => {\n        if (res.data) {\n          this.props.history.push(TO_.SIGNIN);\n        } else {\n          this.setState(\n            {\n              loggedIn: false,\n              isInfoToolTipOpen: true,\n            },\n            () => {\n              console.log(res);\n            }\n          );\n        }\n      })\n      .catch((err) => console.log(err))\n      .finally(() => this.setState({ isLoading: false }));\n  };\n\n  /**\n   * @method handleLogin\n   * @description Обработчик сабмита в форме входа<br>\n   * Собирает данные, введенные пользователем в форму, отправляет запрос на авторизацию пользователя,\n   *  в случае успеха данные пользователя из формы, сохраняет токен, полученный в ответе от сервера,\n   *  переадресовывает на главную страницу приложения.\n   * @param {Object} userData - объект с данными пользователя из формы входа\n   * @param {String} userData.login - емэйл (логин), введенный пользователем при входе\n   * @param {String} userData.password - пароль, введенный пользователем при входе\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link Login}\n   */\n  handleLogin = ({ password, login }) => {\n    this.setState({ isLoading: true });\n    auth\n      .authorize(password, login)\n      .then((res) => {\n        if (res.token) {\n          setToken(res.token);\n          this.setState(\n            {\n              loggedIn: true,\n              userData: {\n                email: login,\n                password,\n              },\n              isInfoToolTipOpen: true,\n            },\n            () => {\n              this.props.history.push(TO_.MAIN);\n            }\n          );\n        } else {\n          this.setState(\n            {\n              loggedIn: false,\n              isInfoToolTipOpen: true,\n            },\n            () => {\n              console.log(res);\n            }\n          );\n        }\n      })\n      .catch((err) => console.log(err))\n      .finally(() => this.setState({ isLoading: false }));\n  };\n\n  /**\n   * @method tokenCheck\n   * @description Метод проверки токена<br>\n   * Если в локальном хранилище браузера сохранен токен, метод отправляет его на сервер для проверки\n   *  его действительности. Если токен действующий - пользователь сразу автоматически авторизуется\n   *  и перенаправляется на главную страницу приложения со своими учетными данными.\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link App}\n   */\n  tokenCheck = () => {\n    const token = getToken();\n    if (token) {\n      auth\n        .getContent(token)\n        .then((res) => {\n          if (res.data) {\n            this.setState(\n              {\n                loggedIn: true,\n                userData: { email: res.data.email },\n              },\n              () => {\n                this.props.history.push(TO_.MAIN);\n              }\n            );\n          } else {\n            this.setState(\n              {\n                loggedIn: false,\n                isInfoToolTipOpen: true,\n              },\n              () => {\n                console.log(res);\n              }\n            );\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  /**\n   * @method handleSignoutButtonClick\n   * @description Обработчик клика по кнопке \"Выйти\"<br>\n   * Пользователь выходит из профиля на форму входа, токен пользователя удаляется.\n   *  Для входа в приложение требуется повторная авторизация.\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link NavBar}\n   */\n  handleSignoutButtonClick = () => {\n    this.setState({ isMenuOpened: false });\n    localStorage.removeItem(TOKEN_KEY);\n    this.props.history.push(TO_.SIGNIN);\n  };\n\n  /**\n   * @method handleMenuButtonClick\n   * @description Обработчик клика по кнопке открытия/закрытия меню<br>\n   * Открывает или закрывает меню, содержащее ссылки на профил пользователя и выход из приложения.\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.1.0\n   * @see {@link NavBar}\n   */\n  handleMenuButtonClick = () => {\n    this.setState({ isMenuOpened: !this.state.isMenuOpened });\n  };\n\n  /**\n   * При монтировании компонента загружаем с сервера актуальные данные профиля пользователя\n   * и карточки\n   * @ignore\n   */\n  componentDidMount() {\n    this.tokenCheck();\n    Promise.all([api.loadUserData(), api.loadCards()])\n      .then(([currentUserData, initialCardsData]) => {\n        this.setState({ currentUser: currentUserData });\n\n        /**\n         * @description массив объектов с деструктурированными данными карточек\n         * @param {Object} initialCardsData - массив объектов с данными карточек, полученный\n         * после успешного запроса на сервер\n         * @constant {Object} initialCards - новый массив объектов с данными карточек\n         * @property {String} initialCards.id - уникальный id карточки\n         * @property {String} initialCards.link - ссылка на изображение карточки\n         * @property {String} initialCards.title - название карточки\n         * @property {Number} initialCards.likesQuantity - число, количество лайков у карточки\n         * @property {Object} initialCards.owner - объект, данные о владельце карточки\n         * @property {Array} initialCards.likes - массив, содержит id всех пользователей, лайкнувших карточку\n         * @ignore\n         */\n        const initialCards = initialCardsData.map((initialCard) => ({\n          id: initialCard._id,\n          link: initialCard.link,\n          title: initialCard.name,\n          likesQuantity: initialCard.likes.length,\n          owner: initialCard.owner,\n          likes: initialCard.likes,\n        }));\n        this.setState({ cards: initialCards });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  /**\n   * @method render\n   * @description Публичный метод<br>\n   * Отрисовывает основные компоненты приложения.\n   * @public\n   * @instance\n   * @memberof App\n   * @since v.2.0.0\n   * @this App\n   */\n  render() {\n    return (\n      <>\n        <CurrentUserContext.Provider value={this.state.currentUser}>\n          <NavBar\n            handleSignoutButtonClick={this.handleSignoutButtonClick}\n            email={this.state.userData.email}\n            handleMenuClick={this.handleMenuButtonClick}\n            isMenuOpened={this.state.isMenuOpened}\n            isDropdownMenu={true}\n          />\n\n          <Header\n            handleSignoutButtonClick={this.handleSignoutButtonClick}\n            email={this.state.userData.email}\n            handleMenuClick={this.handleMenuButtonClick}\n            isMenuOpened={this.state.isMenuOpened}\n            isDropdownMenu={false}\n          />\n\n          <Switch>\n            <ProtectedRoute\n              path={TO_.MAIN}\n              exact\n              loggedIn={this.state.loggedIn}\n              onEditProfile={this.handleEditProfileClick}\n              onAddPlace={this.handleAddPlaceClick}\n              onEditAvatar={this.handleEditAvatarClick}\n              onCardClick={this.handleCardClick}\n              onCardLike={this.handleCardLike}\n              onCardDelete={this.handleCardDelete}\n              cards={this.state.cards}\n              component={Main}\n            />\n\n            <Route path={TO_.SIGNUP}>\n              <Register\n                isLoading={this.state.isLoading}\n                handleRegister={this.handleRegister}\n              />\n            </Route>\n\n            <Route path={TO_.SIGNIN}>\n              <Login\n                isLoading={this.state.isLoading}\n                handleLogin={this.handleLogin}\n                userData={this.state.userData}\n              />\n            </Route>\n\n            <Route path={TO_.MAIN}>\n              {!this.state.loggedIn ? (\n                <Redirect to={TO_.SIGNIN} />\n              ) : (\n                <Redirect to={TO_.MAIN} />\n              )}\n            </Route>\n          </Switch>\n\n          <Footer />\n\n          <EditProfilePopup\n            isOpen={this.state.isEditProfilePopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onUpdateUser={this.handleUpdateUser}\n            isLoading={this.state.isLoading}\n          />\n\n          <EditAvatarPopup\n            isOpen={this.state.isEditAvatarPopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onUpdateAvatar={this.handleUpdateAvatar}\n            isLoading={this.state.isLoading}\n          />\n\n          <AddPlacePopup\n            isOpen={this.state.isAddPlacePopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onSubmit={this.handleAddPlaceSubmit}\n            isLoading={this.state.isLoading}\n          />\n\n          <DeleteConfirmPopup\n            isOpen={this.state.isDeleteConfirmPopupOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            onSubmit={this.handleDeleteConfirm}\n            isProcessing={this.state.isLoading}\n          />\n\n          <ImagePopup\n            card={this.state.selectedCard}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            isOpen={this.state.isImagePopupOpen}\n          />\n\n          <InfoToolTip\n            isOpen={this.state.isInfoToolTipOpen}\n            onClose={this.closeAllPopups}\n            onOverlayClick={this.handleClickOnOverlay}\n            loggedIn={this.state.loggedIn}\n          />\n        </CurrentUserContext.Provider>\n      </>\n    );\n  }\n}\n\nexport default withRouter(App);\n","/**\n * Эндпоинты\n * @ignore\n */\nexport const LOGIN = \"/signin\";\n\nexport const REGISTER = \"/signup\";\n\nexport const USER = \"/users/me\";\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { BrowserRouter } from 'react-router-dom';\n\n/**\n * @module index\n * @description Файл index.js - точка входа для всего приложения<br>\n * Метод ReactDOM.render() - отрисовывает главный компонент приложения App в DOM\n */\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}